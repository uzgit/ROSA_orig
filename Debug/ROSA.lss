
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000131c  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001400  80001400  00001800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80001800  80001800  00001c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80001884  80001884  00001c84  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80001888  00002008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80001d94  00002514  2**0
                  ALLOC
  9 .bss          00000080  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000da68  00000598  00000598  00000000  2**0
                  ALLOC
 11 .comment      00000068  00000000  00000000  00002514  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000538  00000000  00000000  00002580  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 0000094e  00000000  00000000  00002ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   00009fac  00000000  00000000  00003406  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001f1b  00000000  00000000  0000d3b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000056b1  00000000  00000000  0000f2cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000a84  00000000  00000000  00014980  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001852  00000000  00000000  00015404  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000163a  00000000  00000000  00016c56  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 006fca8f  00000000  00000000  00018290  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 00000480  00000000  00000000  00714d1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	0a f4       	st.b	--r5,r4

Disassembly of section .text:

80000008 <insert_at_head>:
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 3d       	sub	sp,12
80000010:	ef 4c ff f8 	st.w	r7[-8],r12
80000014:	ef 4b ff f4 	st.w	r7[-12],r11
80000018:	3f f8       	mov	r8,-1
8000001a:	ef 58 ff fe 	st.h	r7[-2],r8
8000001e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000022:	58 08       	cp.w	r8,0
80000024:	c2 60       	breq	80000070 <insert_at_head+0x68>
80000026:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000002a:	70 08       	ld.w	r8,r8[0x0]
8000002c:	58 08       	cp.w	r8,0
8000002e:	c0 c1       	brne	80000046 <insert_at_head+0x3e>
80000030:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000034:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000038:	91 09       	st.w	r8[0x0],r9
8000003a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000003e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000042:	91 19       	st.w	r8[0x4],r9
80000044:	c1 38       	rjmp	8000006a <insert_at_head+0x62>
80000046:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000004a:	70 08       	ld.w	r8,r8[0x0]
8000004c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000050:	f1 49 00 70 	st.w	r8[112],r9
80000054:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000058:	70 09       	ld.w	r9,r8[0x0]
8000005a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000005e:	91 09       	st.w	r8[0x0],r9
80000060:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000064:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000068:	91 09       	st.w	r8[0x0],r9
8000006a:	30 08       	mov	r8,0
8000006c:	ef 58 ff fe 	st.h	r7[-2],r8
80000070:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80000074:	10 9c       	mov	r12,r8
80000076:	2f dd       	sub	sp,-12
80000078:	e3 cd 80 80 	ldm	sp++,r7,pc

8000007c <insert_at_tail>:
8000007c:	eb cd 40 80 	pushm	r7,lr
80000080:	1a 97       	mov	r7,sp
80000082:	20 3d       	sub	sp,12
80000084:	ef 4c ff f8 	st.w	r7[-8],r12
80000088:	ef 4b ff f4 	st.w	r7[-12],r11
8000008c:	3f f8       	mov	r8,-1
8000008e:	ef 58 ff fe 	st.h	r7[-2],r8
80000092:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000096:	58 08       	cp.w	r8,0
80000098:	c2 10       	breq	800000da <insert_at_tail+0x5e>
8000009a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000009e:	70 18       	ld.w	r8,r8[0x4]
800000a0:	58 08       	cp.w	r8,0
800000a2:	c0 c1       	brne	800000ba <insert_at_tail+0x3e>
800000a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800000ac:	91 09       	st.w	r8[0x0],r9
800000ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000b2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800000b6:	91 19       	st.w	r8[0x4],r9
800000b8:	c0 e8       	rjmp	800000d4 <insert_at_tail+0x58>
800000ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000be:	70 18       	ld.w	r8,r8[0x4]
800000c0:	ee fb ff f4 	ld.w	r11,r7[-12]
800000c4:	10 9c       	mov	r12,r8
800000c6:	f0 1f 00 09 	mcall	800000e8 <insert_at_tail+0x6c>
800000ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000ce:	ee f9 ff f4 	ld.w	r9,r7[-12]
800000d2:	91 19       	st.w	r8[0x4],r9
800000d4:	30 08       	mov	r8,0
800000d6:	ef 58 ff fe 	st.h	r7[-2],r8
800000da:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800000de:	10 9c       	mov	r12,r8
800000e0:	2f dd       	sub	sp,-12
800000e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800000e6:	00 00       	add	r0,r0
800000e8:	80 00       	ld.sh	r0,r0[0x0]
800000ea:	00 ec       	st.h	--r0,r12

800000ec <insert_after>:
800000ec:	eb cd 40 80 	pushm	r7,lr
800000f0:	1a 97       	mov	r7,sp
800000f2:	20 3d       	sub	sp,12
800000f4:	ef 4c ff f8 	st.w	r7[-8],r12
800000f8:	ef 4b ff f4 	st.w	r7[-12],r11
800000fc:	3f f8       	mov	r8,-1
800000fe:	ef 58 ff fe 	st.h	r7[-2],r8
80000102:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000106:	58 08       	cp.w	r8,0
80000108:	c1 90       	breq	8000013a <insert_after+0x4e>
8000010a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000010e:	58 08       	cp.w	r8,0
80000110:	c1 50       	breq	8000013a <insert_after+0x4e>
80000112:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000116:	70 09       	ld.w	r9,r8[0x0]
80000118:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000011c:	91 09       	st.w	r8[0x0],r9
8000011e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000122:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000126:	f1 49 00 70 	st.w	r8[112],r9
8000012a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000012e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000132:	91 09       	st.w	r8[0x0],r9
80000134:	30 08       	mov	r8,0
80000136:	ef 58 ff fe 	st.h	r7[-2],r8
8000013a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000013e:	10 9c       	mov	r12,r8
80000140:	2f dd       	sub	sp,-12
80000142:	e3 cd 80 80 	ldm	sp++,r7,pc
80000146:	d7 03       	nop

80000148 <insert_by_priority>:
80000148:	eb cd 40 80 	pushm	r7,lr
8000014c:	1a 97       	mov	r7,sp
8000014e:	20 5d       	sub	sp,20
80000150:	ef 4c ff f0 	st.w	r7[-16],r12
80000154:	ef 4b ff ec 	st.w	r7[-20],r11
80000158:	3f f8       	mov	r8,-1
8000015a:	ef 58 ff f6 	st.h	r7[-10],r8
8000015e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000162:	58 08       	cp.w	r8,0
80000164:	c5 d0       	breq	8000021e <insert_by_priority+0xd6>
80000166:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000016a:	70 08       	ld.w	r8,r8[0x0]
8000016c:	58 08       	cp.w	r8,0
8000016e:	c0 81       	brne	8000017e <insert_by_priority+0x36>
80000170:	ee fb ff ec 	ld.w	r11,r7[-20]
80000174:	ee fc ff f0 	ld.w	r12,r7[-16]
80000178:	f0 1f 00 2d 	mcall	8000022c <insert_by_priority+0xe4>
8000017c:	c4 e8       	rjmp	80000218 <insert_by_priority+0xd0>
8000017e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000182:	70 08       	ld.w	r8,r8[0x0]
80000184:	ef 48 ff f8 	st.w	r7[-8],r8
80000188:	c0 68       	rjmp	80000194 <insert_by_priority+0x4c>
8000018a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000018e:	70 08       	ld.w	r8,r8[0x0]
80000190:	ef 48 ff f8 	st.w	r7[-8],r8
80000194:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000198:	58 08       	cp.w	r8,0
8000019a:	c0 d0       	breq	800001b4 <insert_by_priority+0x6c>
8000019c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001a0:	f1 39 00 64 	ld.ub	r9,r8[100]
800001a4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800001a8:	f1 38 00 64 	ld.ub	r8,r8[100]
800001ac:	f0 09 18 00 	cp.b	r9,r8
800001b0:	fe 98 ff ed 	brls	8000018a <insert_by_priority+0x42>
800001b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001b8:	58 08       	cp.w	r8,0
800001ba:	c0 81       	brne	800001ca <insert_by_priority+0x82>
800001bc:	ee fb ff ec 	ld.w	r11,r7[-20]
800001c0:	ee fc ff f0 	ld.w	r12,r7[-16]
800001c4:	f0 1f 00 1b 	mcall	80000230 <insert_by_priority+0xe8>
800001c8:	c2 88       	rjmp	80000218 <insert_by_priority+0xd0>
800001ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800001ce:	70 09       	ld.w	r9,r8[0x0]
800001d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800001d4:	10 39       	cp.w	r9,r8
800001d6:	c1 41       	brne	800001fe <insert_by_priority+0xb6>
800001d8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800001dc:	f1 39 00 64 	ld.ub	r9,r8[100]
800001e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800001e4:	70 08       	ld.w	r8,r8[0x0]
800001e6:	f1 38 00 64 	ld.ub	r8,r8[100]
800001ea:	f0 09 18 00 	cp.b	r9,r8
800001ee:	c0 82       	brcc	800001fe <insert_by_priority+0xb6>
800001f0:	ee fb ff ec 	ld.w	r11,r7[-20]
800001f4:	ee fc ff f0 	ld.w	r12,r7[-16]
800001f8:	f0 1f 00 0d 	mcall	8000022c <insert_by_priority+0xe4>
800001fc:	c0 e8       	rjmp	80000218 <insert_by_priority+0xd0>
800001fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000202:	71 c8       	ld.w	r8,r8[0x70]
80000204:	ef 48 ff fc 	st.w	r7[-4],r8
80000208:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000020c:	71 c8       	ld.w	r8,r8[0x70]
8000020e:	ee fb ff ec 	ld.w	r11,r7[-20]
80000212:	10 9c       	mov	r12,r8
80000214:	f0 1f 00 08 	mcall	80000234 <insert_by_priority+0xec>
80000218:	30 08       	mov	r8,0
8000021a:	ef 58 ff f6 	st.h	r7[-10],r8
8000021e:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80000222:	10 9c       	mov	r12,r8
80000224:	2f bd       	sub	sp,-20
80000226:	e3 cd 80 80 	ldm	sp++,r7,pc
8000022a:	00 00       	add	r0,r0
8000022c:	80 00       	ld.sh	r0,r0[0x0]
8000022e:	00 08       	add	r8,r0
80000230:	80 00       	ld.sh	r0,r0[0x0]
80000232:	00 7c       	tst	r12,r0
80000234:	80 00       	ld.sh	r0,r0[0x0]
80000236:	00 ec       	st.h	--r0,r12

80000238 <remove_tcb>:
80000238:	eb cd 40 80 	pushm	r7,lr
8000023c:	1a 97       	mov	r7,sp
8000023e:	20 4d       	sub	sp,16
80000240:	ef 4c ff f0 	st.w	r7[-16],r12
80000244:	3f f8       	mov	r8,-1
80000246:	ef 58 ff f6 	st.h	r7[-10],r8
8000024a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000024e:	58 08       	cp.w	r8,0
80000250:	c2 40       	breq	80000298 <remove_tcb+0x60>
80000252:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000256:	70 08       	ld.w	r8,r8[0x0]
80000258:	ef 48 ff f8 	st.w	r7[-8],r8
8000025c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000260:	71 c8       	ld.w	r8,r8[0x70]
80000262:	ef 48 ff fc 	st.w	r7[-4],r8
80000266:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000026a:	70 09       	ld.w	r9,r8[0x0]
8000026c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000270:	91 09       	st.w	r8[0x0],r9
80000272:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000276:	71 c9       	ld.w	r9,r8[0x70]
80000278:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000027c:	f1 49 00 70 	st.w	r8[112],r9
80000280:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000284:	30 09       	mov	r9,0
80000286:	91 09       	st.w	r8[0x0],r9
80000288:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000028c:	30 09       	mov	r9,0
8000028e:	f1 49 00 70 	st.w	r8[112],r9
80000292:	30 08       	mov	r8,0
80000294:	ef 58 ff f6 	st.h	r7[-10],r8
80000298:	ef 08 ff f6 	ld.sh	r8,r7[-10]
8000029c:	10 9c       	mov	r12,r8
8000029e:	2f cd       	sub	sp,-16
800002a0:	e3 cd 80 80 	ldm	sp++,r7,pc

800002a4 <ROSA_taskCreate>:
#include "include/kernel/rosa_ker.h"

//void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)

int16_t ROSA_taskCreate(ROSA_taskHandle_t * th, char * id, void * taskFunc, uint32_t stackSize, uint8_t priority)
{
800002a4:	eb cd 40 80 	pushm	r7,lr
800002a8:	1a 97       	mov	r7,sp
800002aa:	20 8d       	sub	sp,32
800002ac:	ef 4c ff f0 	st.w	r7[-16],r12
800002b0:	ef 4b ff ec 	st.w	r7[-20],r11
800002b4:	ef 4a ff e8 	st.w	r7[-24],r10
800002b8:	ef 49 ff e4 	st.w	r7[-28],r9
800002bc:	ef 68 ff e0 	st.b	r7[-32],r8
	int16_t result = -1;
800002c0:	3f f8       	mov	r8,-1
800002c2:	ef 58 ff fa 	st.h	r7[-6],r8
	tcb * task;
	int * stack;
	
	task = malloc(sizeof(tcb));
800002c6:	37 4c       	mov	r12,116
800002c8:	f0 1f 00 25 	mcall	8000035c <ROSA_taskCreate+0xb8>
800002cc:	18 98       	mov	r8,r12
800002ce:	ef 48 ff f4 	st.w	r7[-12],r8
	stack = malloc(DEFAULT_STACK_SIZE * sizeof(int));
800002d2:	e0 6c 01 00 	mov	r12,256
800002d6:	f0 1f 00 22 	mcall	8000035c <ROSA_taskCreate+0xb8>
800002da:	18 98       	mov	r8,r12
800002dc:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if( (task != NULL) && (stack != NULL) )
800002e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800002e4:	58 08       	cp.w	r8,0
800002e6:	c3 50       	breq	80000350 <ROSA_taskCreate+0xac>
800002e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002ec:	58 08       	cp.w	r8,0
800002ee:	c3 10       	breq	80000350 <ROSA_taskCreate+0xac>
	{
		th = malloc(sizeof(tcb*));
800002f0:	30 4c       	mov	r12,4
800002f2:	f0 1f 00 1b 	mcall	8000035c <ROSA_taskCreate+0xb8>
800002f6:	18 98       	mov	r8,r12
800002f8:	ef 48 ff f0 	st.w	r7[-16],r8
		task = malloc(sizeof(tcb));
800002fc:	37 4c       	mov	r12,116
800002fe:	f0 1f 00 18 	mcall	8000035c <ROSA_taskCreate+0xb8>
80000302:	18 98       	mov	r8,r12
80000304:	ef 48 ff f4 	st.w	r7[-12],r8
		//stack = malloc(sizeof(int));
		
		th = & task;
80000308:	ee c8 00 0c 	sub	r8,r7,12
8000030c:	ef 48 ff f0 	st.w	r7[-16],r8
		
		task->priority			 = priority;
80000310:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000314:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80000318:	f3 68 00 64 	st.b	r9[100],r8
		task->effective_priority = priority;
8000031c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000320:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80000324:	f3 68 00 65 	st.b	r9[101],r8
		ROSA_tcbCreate(task, id, taskFunc, stack, stackSize);
80000328:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000032c:	ee fc ff f4 	ld.w	r12,r7[-12]
80000330:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000334:	ee fa ff e8 	ld.w	r10,r7[-24]
80000338:	ee fb ff ec 	ld.w	r11,r7[-20]
8000033c:	f0 1f 00 09 	mcall	80000360 <ROSA_taskCreate+0xbc>
		ROSA_tcbInstall(task);
80000340:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000344:	10 9c       	mov	r12,r8
80000346:	f0 1f 00 08 	mcall	80000364 <ROSA_taskCreate+0xc0>
		
		result = 0;
8000034a:	30 08       	mov	r8,0
8000034c:	ef 58 ff fa 	st.h	r7[-6],r8
	}
	
	return result;
80000350:	ef 08 ff fa 	ld.sh	r8,r7[-6]
}
80000354:	10 9c       	mov	r12,r8
80000356:	2f 8d       	sub	sp,-32
80000358:	e3 cd 80 80 	ldm	sp++,r7,pc
8000035c:	80 00       	ld.sh	r0,r0[0x0]
8000035e:	0b ec       	ld.ub	r12,r5[0x6]
80000360:	80 00       	ld.sh	r0,r0[0x0]
80000362:	04 a8       	st.w	r2++,r8
80000364:	80 00       	ld.sh	r0,r0[0x0]
80000366:	05 5c       	ld.sh	r12,--r2

80000368 <usart_options>:
80000368:	00 00 e1 00 08 04 00 00 00 00 00 00 74 61 73 6b     ............task
80000378:	41 00 00 00                                         A...

8000037c <taskA>:

ROSA_taskHandle_t A;
ROSA_taskHandle_t B;

void taskA(void)
{
8000037c:	eb cd 40 80 	pushm	r7,lr
80000380:	1a 97       	mov	r7,sp
	while(1)
	{
		ledToggle(LED0_GPIO);
80000382:	33 bc       	mov	r12,59
80000384:	f0 1f 00 05 	mcall	80000398 <taskA+0x1c>
		ledToggle(LED0_GPIO);
80000388:	33 bc       	mov	r12,59
8000038a:	f0 1f 00 04 	mcall	80000398 <taskA+0x1c>
		ledToggle(LED0_GPIO);
8000038e:	33 bc       	mov	r12,59
80000390:	f0 1f 00 02 	mcall	80000398 <taskA+0x1c>
		//ledOn(LED0_GPIO);
		//ROSA_delay(2000);
		//ledOff(LED0_GPIO);
	}
80000394:	cf 7b       	rjmp	80000382 <taskA+0x6>
80000396:	00 00       	add	r0,r0
80000398:	80 00       	ld.sh	r0,r0[0x0]
8000039a:	0a 1c       	sub	r12,r5

8000039c <main>:

/*************************************************************
 * Main function
 ************************************************************/
int main(void)
{
8000039c:	eb cd 40 80 	pushm	r7,lr
800003a0:	1a 97       	mov	r7,sp
	//Initialize the ROSA kernel
	ROSA_init();
800003a2:	f0 1f 00 08 	mcall	800003c0 <main+0x24>
	
	ROSA_taskCreate(A, "taskA", taskA, 40, 1);
800003a6:	48 88       	lddpc	r8,800003c4 <main+0x28>
800003a8:	70 08       	ld.w	r8,r8[0x0]
800003aa:	10 9c       	mov	r12,r8
800003ac:	30 18       	mov	r8,1
800003ae:	32 89       	mov	r9,40
800003b0:	48 6a       	lddpc	r10,800003c8 <main+0x2c>
800003b2:	48 7b       	lddpc	r11,800003cc <main+0x30>
800003b4:	f0 1f 00 07 	mcall	800003d0 <main+0x34>

	//Start the ROSA kernel
	ROSA_start();
800003b8:	f0 1f 00 07 	mcall	800003d4 <main+0x38>
	

	/* Execution will never return here */
	while(1);
800003bc:	c0 08       	rjmp	800003bc <main+0x20>
800003be:	00 00       	add	r0,r0
800003c0:	80 00       	ld.sh	r0,r0[0x0]
800003c2:	04 18       	sub	r8,r2
800003c4:	00 00       	add	r0,r0
800003c6:	05 60       	ld.uh	r0,--r2
800003c8:	80 00       	ld.sh	r0,r0[0x0]
800003ca:	03 7c       	ld.ub	r12,--r1
800003cc:	80 00       	ld.sh	r0,r0[0x0]
800003ce:	03 74       	ld.ub	r4,--r1
800003d0:	80 00       	ld.sh	r0,r0[0x0]
800003d2:	02 a4       	st.w	r1++,r4
800003d4:	80 00       	ld.sh	r0,r0[0x0]
800003d6:	05 d0       	ld.ub	r0,r2[0x5]

800003d8 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
800003d8:	eb cd 40 80 	pushm	r7,lr
800003dc:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
800003de:	f0 1f 00 0b 	mcall	80000408 <ROSA_yieldFromISR+0x30>
	tickCount++;
800003e2:	48 b8       	lddpc	r8,8000040c <ROSA_yieldFromISR+0x34>
800003e4:	f0 ea 00 00 	ld.d	r10,r8[0]
800003e8:	30 18       	mov	r8,1
800003ea:	30 09       	mov	r9,0
800003ec:	f4 08 00 08 	add	r8,r10,r8
800003f0:	f6 09 00 49 	adc	r9,r11,r9
800003f4:	48 6a       	lddpc	r10,8000040c <ROSA_yieldFromISR+0x34>
800003f6:	f4 e9 00 00 	st.d	r10[0],r8
	scheduler();			  //Find next task to execute
800003fa:	f0 1f 00 06 	mcall	80000410 <ROSA_yieldFromISR+0x38>
	contextRestoreFromISR();  //...and switch over to it.
800003fe:	f0 1f 00 06 	mcall	80000414 <ROSA_yieldFromISR+0x3c>
}
80000402:	e3 cd 80 80 	ldm	sp++,r7,pc
80000406:	00 00       	add	r0,r0
80000408:	80 00       	ld.sh	r0,r0[0x0]
8000040a:	15 7e       	ld.ub	lr,--r10
8000040c:	00 00       	add	r0,r0
8000040e:	05 58       	ld.sh	r8,--r2
80000410:	80 00       	ld.sh	r0,r0[0x0]
80000412:	06 b0       	st.h	r3++,r0
80000414:	80 00       	ld.sh	r0,r0[0x0]
80000416:	15 b8       	ld.ub	r8,r10[0x3]

80000418 <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
80000418:	eb cd 40 80 	pushm	r7,lr
8000041c:	1a 97       	mov	r7,sp
	//Do initialization of I/O drivers
	ledInit();									//LEDs
8000041e:	f0 1f 00 1a 	mcall	80000484 <ROSA_init+0x6c>
	//joystickInit();								//Joystick
	//potInit();									//Potentiometer
	//usartInit(USART, &usart_options, FOSC0);	//Serial communication

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
80000422:	49 a8       	lddpc	r8,80000488 <ROSA_init+0x70>
80000424:	30 09       	mov	r9,0
80000426:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
80000428:	49 98       	lddpc	r8,8000048c <ROSA_init+0x74>
8000042a:	30 09       	mov	r9,0
8000042c:	91 09       	st.w	r8[0x0],r9
	
	ready_list = calloc(1, sizeof(linked_list));
8000042e:	30 8b       	mov	r11,8
80000430:	30 1c       	mov	r12,1
80000432:	f0 1f 00 18 	mcall	80000490 <ROSA_init+0x78>
80000436:	18 98       	mov	r8,r12
80000438:	10 99       	mov	r9,r8
8000043a:	49 78       	lddpc	r8,80000494 <ROSA_init+0x7c>
8000043c:	91 09       	st.w	r8[0x0],r9
	suspended_list = calloc(1, sizeof(linked_list));
8000043e:	30 8b       	mov	r11,8
80000440:	30 1c       	mov	r12,1
80000442:	f0 1f 00 14 	mcall	80000490 <ROSA_init+0x78>
80000446:	18 98       	mov	r8,r12
80000448:	10 99       	mov	r9,r8
8000044a:	49 48       	lddpc	r8,80000498 <ROSA_init+0x80>
8000044c:	91 09       	st.w	r8[0x0],r9
	
	tickCount = 0;
8000044e:	49 4a       	lddpc	r10,8000049c <ROSA_init+0x84>
80000450:	30 08       	mov	r8,0
80000452:	30 09       	mov	r9,0
80000454:	f4 e9 00 00 	st.d	r10[0],r8

	//Initialize the timer to 100 ms period.
	//...
	timerInit(1);
80000458:	30 1c       	mov	r12,1
8000045a:	f0 1f 00 12 	mcall	800004a0 <ROSA_init+0x88>
	interruptEnable();
8000045e:	f0 1f 00 12 	mcall	800004a4 <ROSA_init+0x8c>
	TC_CCR &= ~(0x01 << 1);
80000462:	fe 78 38 00 	mov	r8,-51200
80000466:	fe 79 38 00 	mov	r9,-51200
8000046a:	72 09       	ld.w	r9,r9[0x0]
8000046c:	a1 d9       	cbr	r9,0x1
8000046e:	91 09       	st.w	r8[0x0],r9
	TC_CCR |= (0x01 << 0 | 0x01<< 2);
80000470:	fe 78 38 00 	mov	r8,-51200
80000474:	fe 79 38 00 	mov	r9,-51200
80000478:	72 09       	ld.w	r9,r9[0x0]
8000047a:	e8 19 00 05 	orl	r9,0x5
8000047e:	91 09       	st.w	r8[0x0],r9
	//timerStart();
	//...
}
80000480:	e3 cd 80 80 	ldm	sp++,r7,pc
80000484:	80 00       	ld.sh	r0,r0[0x0]
80000486:	09 70       	ld.ub	r0,--r4
80000488:	00 00       	add	r0,r0
8000048a:	05 88       	ld.ub	r8,r2[0x0]
8000048c:	00 00       	add	r0,r0
8000048e:	05 8c       	ld.ub	r12,r2[0x0]
80000490:	80 00       	ld.sh	r0,r0[0x0]
80000492:	0b 74       	ld.ub	r4,--r5
80000494:	00 00       	add	r0,r0
80000496:	05 54       	ld.sh	r4,--r2
80000498:	00 00       	add	r0,r0
8000049a:	05 50       	ld.sh	r0,--r2
8000049c:	00 00       	add	r0,r0
8000049e:	05 58       	ld.sh	r8,--r2
800004a0:	80 00       	ld.sh	r0,r0[0x0]
800004a2:	0a 3c       	cp.w	r12,r5
800004a4:	80 00       	ld.sh	r0,r0[0x0]
800004a6:	15 6a       	ld.uh	r10,--r10

800004a8 <ROSA_tcbCreate>:
 * Comment:
 * 	Create the TCB with correct values.
 *
 **********************************************************/
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
800004a8:	eb cd 40 80 	pushm	r7,lr
800004ac:	1a 97       	mov	r7,sp
800004ae:	20 6d       	sub	sp,24
800004b0:	ef 4c ff f8 	st.w	r7[-8],r12
800004b4:	ef 4b ff f4 	st.w	r7[-12],r11
800004b8:	ef 4a ff f0 	st.w	r7[-16],r10
800004bc:	ef 49 ff ec 	st.w	r7[-20],r9
800004c0:	ef 48 ff e8 	st.w	r7[-24],r8
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800004c4:	30 08       	mov	r8,0
800004c6:	ef 48 ff fc 	st.w	r7[-4],r8
800004ca:	c1 48       	rjmp	800004f2 <ROSA_tcbCreate+0x4a>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
800004cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800004d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004d4:	ee fa ff f4 	ld.w	r10,r7[-12]
800004d8:	f4 08 00 08 	add	r8,r10,r8
800004dc:	11 88       	ld.ub	r8,r8[0x0]
800004de:	ee fa ff f8 	ld.w	r10,r7[-8]
800004e2:	f4 09 00 09 	add	r9,r10,r9
800004e6:	b2 c8       	st.b	r9[0x4],r8
void ROSA_tcbCreate(tcb * tcbTask, char tcbName[NAMESIZE], void *tcbFunction, int * tcbStack, int tcbStackSize)
{
	int i;

	//Initialize the tcb with the correct values
	for(i = 0; i < NAMESIZE; i++) {
800004e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004ec:	2f f8       	sub	r8,-1
800004ee:	ef 48 ff fc 	st.w	r7[-4],r8
800004f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004f6:	58 38       	cp.w	r8,3
800004f8:	fe 9a ff ea 	brle	800004cc <ROSA_tcbCreate+0x24>
		//Copy the id/name
		tcbTask->id[i] = tcbName[i];
	}

	//Dont link this TCB anywhere yet.
	tcbTask->nexttcb = NULL;
800004fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000500:	30 09       	mov	r9,0
80000502:	91 09       	st.w	r8[0x0],r9

	//Set the task function start and return address.
	tcbTask->staddr = tcbFunction;
80000504:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000508:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000050c:	91 29       	st.w	r8[0x8],r9
	tcbTask->retaddr = (int)tcbFunction;
8000050e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000512:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000516:	91 99       	st.w	r8[0x24],r9

	//Set up the stack.
	tcbTask->datasize = tcbStackSize;
80000518:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000051c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000520:	91 49       	st.w	r8[0x10],r9
	tcbTask->dataarea = tcbStack + tcbStackSize;
80000522:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000526:	a3 68       	lsl	r8,0x2
80000528:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000052c:	10 09       	add	r9,r8
8000052e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000532:	91 39       	st.w	r8[0xc],r9
	tcbTask->saveusp = tcbTask->dataarea;
80000534:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000538:	70 39       	ld.w	r9,r8[0xc]
8000053a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000053e:	91 59       	st.w	r8[0x14],r9

	//Set the initial SR.
	tcbTask->savesr = ROSA_INITIALSR;
80000540:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000544:	fc 19 00 1c 	movh	r9,0x1c
80000548:	91 89       	st.w	r8[0x20],r9

	//Initialize context.
	contextInit(tcbTask);
8000054a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000054e:	f0 1f 00 03 	mcall	80000558 <ROSA_tcbCreate+0xb0>
}
80000552:	2f ad       	sub	sp,-24
80000554:	e3 cd 80 80 	ldm	sp++,r7,pc
80000558:	80 00       	ld.sh	r0,r0[0x0]
8000055a:	06 06       	add	r6,r3

8000055c <ROSA_tcbInstall>:
 * Comment:
 * 	Install the TCB into the TCBLIST.
 *
 **********************************************************/
void ROSA_tcbInstall(tcb * tcbTask)
{
8000055c:	eb cd 40 80 	pushm	r7,lr
80000560:	1a 97       	mov	r7,sp
80000562:	20 2d       	sub	sp,8
80000564:	ef 4c ff f8 	st.w	r7[-8],r12
	//insert_by_priority(TCBLIST, tcbTask);

	tcb * tcbTmp;

	// Is this the first tcb installed?
	if(TCBLIST == NULL) {
80000568:	49 98       	lddpc	r8,800005cc <ROSA_tcbInstall+0x70>
8000056a:	70 08       	ld.w	r8,r8[0x0]
8000056c:	58 08       	cp.w	r8,0
8000056e:	c1 01       	brne	8000058e <ROSA_tcbInstall+0x32>
		TCBLIST = tcbTask;
80000570:	49 78       	lddpc	r8,800005cc <ROSA_tcbInstall+0x70>
80000572:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000576:	91 09       	st.w	r8[0x0],r9
		TCBLIST->nexttcb = tcbTask;			//Install the first tcb
80000578:	49 58       	lddpc	r8,800005cc <ROSA_tcbInstall+0x70>
8000057a:	70 08       	ld.w	r8,r8[0x0]
8000057c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000580:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
80000582:	49 38       	lddpc	r8,800005cc <ROSA_tcbInstall+0x70>
80000584:	70 09       	ld.w	r9,r8[0x0]
80000586:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000058a:	91 09       	st.w	r8[0x0],r9
8000058c:	c1 c8       	rjmp	800005c4 <ROSA_tcbInstall+0x68>
	}
	else {
		tcbTmp = TCBLIST;					//Find last tcb in the list
8000058e:	49 08       	lddpc	r8,800005cc <ROSA_tcbInstall+0x70>
80000590:	70 08       	ld.w	r8,r8[0x0]
80000592:	ef 48 ff fc 	st.w	r7[-4],r8
		while(tcbTmp->nexttcb != TCBLIST) {
80000596:	c0 68       	rjmp	800005a2 <ROSA_tcbInstall+0x46>
			tcbTmp = tcbTmp->nexttcb;
80000598:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000059c:	70 08       	ld.w	r8,r8[0x0]
8000059e:	ef 48 ff fc 	st.w	r7[-4],r8
		TCBLIST->nexttcb = tcbTask;			//Install the first tcb
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
	}
	else {
		tcbTmp = TCBLIST;					//Find last tcb in the list
		while(tcbTmp->nexttcb != TCBLIST) {
800005a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005a6:	70 09       	ld.w	r9,r8[0x0]
800005a8:	48 98       	lddpc	r8,800005cc <ROSA_tcbInstall+0x70>
800005aa:	70 08       	ld.w	r8,r8[0x0]
800005ac:	10 39       	cp.w	r9,r8
800005ae:	cf 51       	brne	80000598 <ROSA_tcbInstall+0x3c>
			tcbTmp = tcbTmp->nexttcb;
		}
		tcbTmp->nexttcb = tcbTask;			//Install tcb last in the list
800005b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800005b8:	91 09       	st.w	r8[0x0],r9
		tcbTask->nexttcb = TCBLIST;			//Make the list circular
800005ba:	48 58       	lddpc	r8,800005cc <ROSA_tcbInstall+0x70>
800005bc:	70 09       	ld.w	r9,r8[0x0]
800005be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800005c2:	91 09       	st.w	r8[0x0],r9
	}

}
800005c4:	2f ed       	sub	sp,-8
800005c6:	e3 cd 80 80 	ldm	sp++,r7,pc
800005ca:	00 00       	add	r0,r0
800005cc:	00 00       	add	r0,r0
800005ce:	05 88       	ld.ub	r8,r2[0x0]

800005d0 <ROSA_start>:
800005d0:	4b 5c       	lddpc	r12,800006a4 <_yield+0xa>
800005d2:	4b 6b       	lddpc	r11,800006a8 <_yield+0xe>
800005d4:	78 0c       	ld.w	r12,r12[0x0]
800005d6:	97 0c       	st.w	r11[0x0],r12
800005d8:	78 50       	ld.w	r0,r12[0x14]
800005da:	1a d0       	st.w	--sp,r0
800005dc:	e5 cd 20 00 	ldmts	sp,sp
800005e0:	1b 00       	ld.w	r0,sp++
800005e2:	78 2e       	ld.w	lr,r12[0x8]
800005e4:	78 80       	ld.w	r0,r12[0x20]
800005e6:	e3 b0 00 00 	mtsr	0x0,r0
800005ea:	79 80       	ld.w	r0,r12[0x60]
800005ec:	79 71       	ld.w	r1,r12[0x5c]
800005ee:	79 62       	ld.w	r2,r12[0x58]
800005f0:	79 53       	ld.w	r3,r12[0x54]
800005f2:	79 44       	ld.w	r4,r12[0x50]
800005f4:	79 35       	ld.w	r5,r12[0x4c]
800005f6:	79 26       	ld.w	r6,r12[0x48]
800005f8:	79 17       	ld.w	r7,r12[0x44]
800005fa:	79 08       	ld.w	r8,r12[0x40]
800005fc:	78 f9       	ld.w	r9,r12[0x3c]
800005fe:	78 ea       	ld.w	r10,r12[0x38]
80000600:	78 db       	ld.w	r11,r12[0x34]
80000602:	78 cc       	ld.w	r12,r12[0x30]
80000604:	1c 9f       	mov	pc,lr

80000606 <contextInit>:
80000606:	78 20       	ld.w	r0,r12[0x8]
80000608:	99 a0       	st.w	r12[0x28],r0
8000060a:	30 00       	mov	r0,0
8000060c:	f9 40 00 60 	st.w	r12[96],r0
80000610:	f9 40 00 5c 	st.w	r12[92],r0
80000614:	f9 40 00 58 	st.w	r12[88],r0
80000618:	f9 40 00 54 	st.w	r12[84],r0
8000061c:	f9 40 00 50 	st.w	r12[80],r0
80000620:	f9 40 00 4c 	st.w	r12[76],r0
80000624:	f9 40 00 48 	st.w	r12[72],r0
80000628:	f9 40 00 44 	st.w	r12[68],r0
8000062c:	f9 40 00 40 	st.w	r12[64],r0
80000630:	99 f0       	st.w	r12[0x3c],r0
80000632:	99 e0       	st.w	r12[0x38],r0
80000634:	99 d0       	st.w	r12[0x34],r0
80000636:	99 c0       	st.w	r12[0x30],r0
80000638:	1c 9f       	mov	pc,lr

8000063a <contextSave>:
8000063a:	d2 01       	pushm	r12
8000063c:	49 bc       	lddpc	r12,800006a8 <_yield+0xe>
8000063e:	78 0c       	ld.w	r12,r12[0x0]
80000640:	99 60       	st.w	r12[0x18],r0
80000642:	99 71       	st.w	r12[0x1c],r1
80000644:	1b 00       	ld.w	r0,sp++
80000646:	99 c0       	st.w	r12[0x30],r0
80000648:	7a 00       	ld.w	r0,sp[0x0]
8000064a:	99 80       	st.w	r12[0x20],r0
8000064c:	33 40       	mov	r0,52
8000064e:	18 00       	add	r0,r12
80000650:	ed c0 0f ff 	stmts	r0,r0-r11
80000654:	1a 90       	mov	r0,sp
80000656:	1a d0       	st.w	--sp,r0
80000658:	ed cd 20 00 	stmts	sp,sp
8000065c:	1b 01       	ld.w	r1,sp++
8000065e:	62 00       	ld.w	r0,r1[0x0]
80000660:	99 90       	st.w	r12[0x24],r0
80000662:	99 a0       	st.w	r12[0x28],r0
80000664:	2f c1       	sub	r1,-4
80000666:	99 51       	st.w	r12[0x14],r1
80000668:	1c 9f       	mov	pc,lr

8000066a <contextRestore>:
8000066a:	49 0c       	lddpc	r12,800006a8 <_yield+0xe>
8000066c:	78 0c       	ld.w	r12,r12[0x0]
8000066e:	78 51       	ld.w	r1,r12[0x14]
80000670:	1a d1       	st.w	--sp,r1
80000672:	e5 cd 20 00 	ldmts	sp,sp
80000676:	1b 01       	ld.w	r1,sp++
80000678:	78 ae       	ld.w	lr,r12[0x28]
8000067a:	78 90       	ld.w	r0,r12[0x24]
8000067c:	9b 10       	st.w	sp[0x4],r0
8000067e:	33 40       	mov	r0,52
80000680:	18 00       	add	r0,r12
80000682:	e5 c0 0f ff 	ldmts	r0,r0-r11
80000686:	78 80       	ld.w	r0,r12[0x20]
80000688:	9b 00       	st.w	sp[0x0],r0
8000068a:	78 60       	ld.w	r0,r12[0x18]
8000068c:	78 71       	ld.w	r1,r12[0x1c]
8000068e:	78 cc       	ld.w	r12,r12[0x30]
80000690:	d6 13       	rets

80000692 <ROSA_yield>:
80000692:	d4 01       	pushm	lr
80000694:	fe ce ff fa 	sub	lr,pc,-6
80000698:	d7 33       	scall

8000069a <_yield>:
8000069a:	cd 0f       	rcall	8000063a <contextSave>
8000069c:	f0 1f 00 04 	mcall	800006ac <_yield+0x12>
800006a0:	ce 5f       	rcall	8000066a <contextRestore>
800006a2:	00 00       	add	r0,r0
800006a4:	00 00       	add	r0,r0
800006a6:	05 88       	ld.ub	r8,r2[0x0]
800006a8:	00 00       	add	r0,r0
800006aa:	05 8c       	ld.ub	r12,r2[0x0]
800006ac:	80 00       	ld.sh	r0,r0[0x0]
800006ae:	06 b0       	st.h	r3++,r0

800006b0 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{	
800006b0:	eb cd 40 8c 	pushm	r2-r3,r7,lr
800006b4:	1a 97       	mov	r7,sp
800006b6:	20 1d       	sub	sp,4
	
	tcb * iterator = suspended_list->head;
800006b8:	49 58       	lddpc	r8,8000070c <scheduler+0x5c>
800006ba:	70 08       	ld.w	r8,r8[0x0]
800006bc:	70 08       	ld.w	r8,r8[0x0]
800006be:	ef 48 ff fc 	st.w	r7[-4],r8
	while( iterator != NULL && iterator->back_online_time <= ROSA_getTickCount() ) //for every suspended task that is now ready
800006c2:	c0 c8       	rjmp	800006da <scheduler+0x2a>
	{
		//remove from suspended queue
		remove_tcb(iterator);
800006c4:	ee fc ff fc 	ld.w	r12,r7[-4]
800006c8:	f0 1f 00 12 	mcall	80000710 <scheduler+0x60>
		insert_by_priority(ready_list, iterator);
800006cc:	49 28       	lddpc	r8,80000714 <scheduler+0x64>
800006ce:	70 08       	ld.w	r8,r8[0x0]
800006d0:	ee fb ff fc 	ld.w	r11,r7[-4]
800006d4:	10 9c       	mov	r12,r8
800006d6:	f0 1f 00 11 	mcall	80000718 <scheduler+0x68>
 **********************************************************/
void scheduler(void)
{	
	
	tcb * iterator = suspended_list->head;
	while( iterator != NULL && iterator->back_online_time <= ROSA_getTickCount() ) //for every suspended task that is now ready
800006da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006de:	58 08       	cp.w	r8,0
800006e0:	c0 e0       	breq	800006fc <scheduler+0x4c>
800006e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006e6:	f0 e2 00 68 	ld.d	r2,r8[104]
800006ea:	f0 1f 00 0d 	mcall	8000071c <scheduler+0x6c>
800006ee:	14 98       	mov	r8,r10
800006f0:	16 99       	mov	r9,r11
800006f2:	10 32       	cp.w	r2,r8
800006f4:	f2 03 13 00 	cpc	r3,r9
800006f8:	fe 98 ff e6 	brls	800006c4 <scheduler+0x14>
		remove_tcb(iterator);
		insert_by_priority(ready_list, iterator);
	}
	
	//Find the next task to execute
	EXECTASK = ready_list->head;
800006fc:	48 68       	lddpc	r8,80000714 <scheduler+0x64>
800006fe:	70 08       	ld.w	r8,r8[0x0]
80000700:	70 09       	ld.w	r9,r8[0x0]
80000702:	48 88       	lddpc	r8,80000720 <scheduler+0x70>
80000704:	91 09       	st.w	r8[0x0],r9
}
80000706:	2f fd       	sub	sp,-4
80000708:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc
8000070c:	00 00       	add	r0,r0
8000070e:	05 50       	ld.sh	r0,--r2
80000710:	80 00       	ld.sh	r0,r0[0x0]
80000712:	02 38       	cp.w	r8,r1
80000714:	00 00       	add	r0,r0
80000716:	05 54       	ld.sh	r4,--r2
80000718:	80 00       	ld.sh	r0,r0[0x0]
8000071a:	01 48       	ld.w	r8,--r0
8000071c:	80 00       	ld.sh	r0,r0[0x0]
8000071e:	08 10       	sub	r0,r4
80000720:	00 00       	add	r0,r0
80000722:	05 8c       	ld.ub	r12,r2[0x0]

80000724 <C.0.9448>:
80000724:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000734 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000734:	eb cd 40 80 	pushm	r7,lr
80000738:	1a 97       	mov	r7,sp
8000073a:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
8000073c:	fe 78 38 00 	mov	r8,-51200
80000740:	ef 48 ff fc 	st.w	r7[-4],r8
	
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000744:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000748:	70 88       	ld.w	r8,r8[0x20]
8000074a:	ef 48 ff f8 	st.w	r7[-8],r8
	if(sr & AVR32_TC_CPCS_MASK)
8000074e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000752:	e2 18 00 10 	andl	r8,0x10,COH
80000756:	c0 30       	breq	8000075c <timerISR+0x28>
		ROSA_yieldFromISR();
80000758:	f0 1f 00 03 	mcall	80000764 <timerISR+0x30>
}
8000075c:	2f ed       	sub	sp,-8
8000075e:	e3 cd 40 80 	ldm	sp++,r7,lr
80000762:	d6 03       	rete
80000764:	80 00       	ld.sh	r0,r0[0x0]
80000766:	03 d8       	ld.ub	r8,r1[0x5]

80000768 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000768:	eb cd 40 80 	pushm	r7,lr
8000076c:	1a 97       	mov	r7,sp
8000076e:	20 7d       	sub	sp,28
80000770:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000774:	4a 48       	lddpc	r8,80000804 <timerPeriodSet+0x9c>
80000776:	ee ca 00 18 	sub	r10,r7,24
8000077a:	10 9b       	mov	r11,r8
8000077c:	f6 e8 00 00 	ld.d	r8,r11[0]
80000780:	f4 e9 00 00 	st.d	r10[0],r8
80000784:	f6 e8 00 08 	ld.d	r8,r11[8]
80000788:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
8000078c:	30 48       	mov	r8,4
8000078e:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80000792:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000796:	20 18       	sub	r8,1
80000798:	a3 68       	lsl	r8,0x2
8000079a:	ee 08 00 08 	add	r8,r7,r8
8000079e:	f0 f9 ff e8 	ld.w	r9,r8[-24]
800007a2:	e0 68 1b 00 	mov	r8,6912
800007a6:	ea 18 00 b7 	orh	r8,0xb7
800007aa:	f0 09 0c 08 	divs	r8,r8,r9
800007ae:	10 99       	mov	r9,r8
800007b0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800007b4:	b1 39       	mul	r9,r8
800007b6:	e0 68 4d d3 	mov	r8,19923
800007ba:	ea 18 10 62 	orh	r8,0x1062
800007be:	f2 08 06 48 	mulu.d	r8,r9,r8
800007c2:	f2 08 16 06 	lsr	r8,r9,0x6
800007c6:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
800007ca:	ee fc ff fc 	ld.w	r12,r7[-4]
800007ce:	f0 1f 00 0f 	mcall	80000808 <timerPeriodSet+0xa0>
	timerRCSet(rc);
800007d2:	ee fc ff f8 	ld.w	r12,r7[-8]
800007d6:	f0 1f 00 0e 	mcall	8000080c <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
800007da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800007de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007e2:	f2 08 02 4a 	mul	r10,r9,r8
800007e6:	e0 68 9f 81 	mov	r8,40833
800007ea:	ea 18 16 5e 	orh	r8,0x165e
800007ee:	f4 08 04 48 	muls.d	r8,r10,r8
800007f2:	b5 49       	asr	r9,0x14
800007f4:	f4 08 14 1f 	asr	r8,r10,0x1f
800007f8:	f2 08 01 08 	sub	r8,r9,r8
}
800007fc:	10 9c       	mov	r12,r8
800007fe:	2f 9d       	sub	sp,-28
80000800:	e3 cd 80 80 	ldm	sp++,r7,pc
80000804:	80 00       	ld.sh	r0,r0[0x0]
80000806:	07 24       	ld.uh	r4,r3++
80000808:	80 00       	ld.sh	r0,r0[0x0]
8000080a:	0a b0       	st.h	r5++,r0
8000080c:	80 00       	ld.sh	r0,r0[0x0]
8000080e:	0a 9a       	mov	r10,r5

80000810 <ROSA_getTickCount>:

uint64_t ROSA_getTickCount(void)
{
80000810:	eb cd 40 80 	pushm	r7,lr
80000814:	1a 97       	mov	r7,sp
	//tickCount is a global variable
	return tickCount;
80000816:	48 48       	lddpc	r8,80000824 <ROSA_getTickCount+0x14>
80000818:	f0 e8 00 00 	ld.d	r8,r8[0]
8000081c:	10 9a       	mov	r10,r8
8000081e:	12 9b       	mov	r11,r9
80000820:	e3 cd 80 80 	ldm	sp++,r7,pc
80000824:	00 00       	add	r0,r0
80000826:	05 58       	ld.sh	r8,--r2

80000828 <gpioInit>:
80000828:	eb cd 40 80 	pushm	r7,lr
8000082c:	1a 97       	mov	r7,sp
8000082e:	20 7d       	sub	sp,28
80000830:	ef 4c ff ec 	st.w	r7[-20],r12
80000834:	ef 4b ff e8 	st.w	r7[-24],r11
80000838:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000083c:	a5 58       	asr	r8,0x5
8000083e:	ef 48 ff f4 	st.w	r7[-12],r8
80000842:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000846:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000084a:	ef 48 ff fc 	st.w	r7[-4],r8
8000084e:	30 19       	mov	r9,1
80000850:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000854:	f2 08 09 48 	lsl	r8,r9,r8
80000858:	ef 48 ff f8 	st.w	r7[-8],r8
8000085c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000860:	a9 68       	lsl	r8,0x8
80000862:	e0 28 f0 00 	sub	r8,61440
80000866:	ef 48 ff f0 	st.w	r7[-16],r8
8000086a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000086e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000872:	91 19       	st.w	r8[0x4],r9
80000874:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000878:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000087c:	91 69       	st.w	r8[0x18],r9
8000087e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000882:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000886:	91 a9       	st.w	r8[0x28],r9
80000888:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000088c:	ef 48 ff e4 	st.w	r7[-28],r8
80000890:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000894:	58 08       	cp.w	r8,0
80000896:	c0 60       	breq	800008a2 <gpioInit+0x7a>
80000898:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000089c:	58 18       	cp.w	r8,1
8000089e:	c0 90       	breq	800008b0 <gpioInit+0x88>
800008a0:	c0 f8       	rjmp	800008be <gpioInit+0x96>
800008a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800008a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800008aa:	f1 49 00 44 	st.w	r8[68],r9
800008ae:	c0 e8       	rjmp	800008ca <gpioInit+0xa2>
800008b0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800008b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800008b8:	f1 49 00 48 	st.w	r8[72],r9
800008bc:	c0 78       	rjmp	800008ca <gpioInit+0xa2>
800008be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800008c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800008c6:	f1 49 00 48 	st.w	r8[72],r9
800008ca:	2f 9d       	sub	sp,-28
800008cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800008d0 <gpioSet>:
800008d0:	eb cd 40 80 	pushm	r7,lr
800008d4:	1a 97       	mov	r7,sp
800008d6:	20 5d       	sub	sp,20
800008d8:	ef 4c ff ec 	st.w	r7[-20],r12
800008dc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800008e0:	a5 58       	asr	r8,0x5
800008e2:	ef 48 ff f4 	st.w	r7[-12],r8
800008e6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800008ea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800008ee:	ef 48 ff fc 	st.w	r7[-4],r8
800008f2:	30 19       	mov	r9,1
800008f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008f8:	f2 08 09 48 	lsl	r8,r9,r8
800008fc:	ef 48 ff f8 	st.w	r7[-8],r8
80000900:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000904:	a9 68       	lsl	r8,0x8
80000906:	e0 28 f0 00 	sub	r8,61440
8000090a:	ef 48 ff f0 	st.w	r7[-16],r8
8000090e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000912:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000916:	f1 49 00 54 	st.w	r8[84],r9
8000091a:	2f bd       	sub	sp,-20
8000091c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000920 <gpioToggle>:
80000920:	eb cd 40 80 	pushm	r7,lr
80000924:	1a 97       	mov	r7,sp
80000926:	20 5d       	sub	sp,20
80000928:	ef 4c ff ec 	st.w	r7[-20],r12
8000092c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000930:	a5 58       	asr	r8,0x5
80000932:	ef 48 ff f4 	st.w	r7[-12],r8
80000936:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000093a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000093e:	ef 48 ff fc 	st.w	r7[-4],r8
80000942:	30 19       	mov	r9,1
80000944:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000948:	f2 08 09 48 	lsl	r8,r9,r8
8000094c:	ef 48 ff f8 	st.w	r7[-8],r8
80000950:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000954:	a9 68       	lsl	r8,0x8
80000956:	e0 28 f0 00 	sub	r8,61440
8000095a:	ef 48 ff f0 	st.w	r7[-16],r8
8000095e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000962:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000966:	f1 49 00 5c 	st.w	r8[92],r9
8000096a:	2f bd       	sub	sp,-20
8000096c:	e3 cd 80 80 	ldm	sp++,r7,pc

80000970 <ledInit>:
80000970:	eb cd 40 80 	pushm	r7,lr
80000974:	1a 97       	mov	r7,sp
80000976:	20 9d       	sub	sp,36
80000978:	49 e8       	lddpc	r8,800009f0 <ledInit+0x80>
8000097a:	ee cb 00 24 	sub	r11,r7,36
8000097e:	10 9a       	mov	r10,r8
80000980:	f4 e8 00 00 	ld.d	r8,r10[0]
80000984:	f6 e9 00 00 	st.d	r11[0],r8
80000988:	f4 e8 00 08 	ld.d	r8,r10[8]
8000098c:	f6 e9 00 08 	st.d	r11[8],r8
80000990:	f4 e8 00 10 	ld.d	r8,r10[16]
80000994:	f6 e9 00 10 	st.d	r11[16],r8
80000998:	f4 e8 00 18 	ld.d	r8,r10[24]
8000099c:	f6 e9 00 18 	st.d	r11[24],r8
800009a0:	30 08       	mov	r8,0
800009a2:	ef 48 ff fc 	st.w	r7[-4],r8
800009a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009aa:	a3 68       	lsl	r8,0x2
800009ac:	ee 08 00 08 	add	r8,r7,r8
800009b0:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800009b4:	10 9c       	mov	r12,r8
800009b6:	f0 1f 00 10 	mcall	800009f4 <ledInit+0x84>
800009ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009be:	a3 68       	lsl	r8,0x2
800009c0:	ee 08 00 08 	add	r8,r7,r8
800009c4:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800009c8:	30 0b       	mov	r11,0
800009ca:	10 9c       	mov	r12,r8
800009cc:	f0 1f 00 0b 	mcall	800009f8 <ledInit+0x88>
800009d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009d4:	58 78       	cp.w	r8,7
800009d6:	5f 18       	srne	r8
800009d8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800009dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009e0:	2f f8       	sub	r8,-1
800009e2:	ef 48 ff fc 	st.w	r7[-4],r8
800009e6:	58 09       	cp.w	r9,0
800009e8:	cd f1       	brne	800009a6 <ledInit+0x36>
800009ea:	2f 7d       	sub	sp,-36
800009ec:	e3 cd 80 80 	ldm	sp++,r7,pc
800009f0:	80 00       	ld.sh	r0,r0[0x0]
800009f2:	18 00       	add	r0,r12
800009f4:	80 00       	ld.sh	r0,r0[0x0]
800009f6:	09 fc       	ld.ub	r12,r4[0x7]
800009f8:	80 00       	ld.sh	r0,r0[0x0]
800009fa:	08 28       	rsub	r8,r4

800009fc <ledOff>:
800009fc:	eb cd 40 80 	pushm	r7,lr
80000a00:	1a 97       	mov	r7,sp
80000a02:	20 1d       	sub	sp,4
80000a04:	ef 4c ff fc 	st.w	r7[-4],r12
80000a08:	ee fc ff fc 	ld.w	r12,r7[-4]
80000a0c:	f0 1f 00 03 	mcall	80000a18 <ledOff+0x1c>
80000a10:	2f fd       	sub	sp,-4
80000a12:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a16:	00 00       	add	r0,r0
80000a18:	80 00       	ld.sh	r0,r0[0x0]
80000a1a:	08 d0       	st.w	--r4,r0

80000a1c <ledToggle>:
80000a1c:	eb cd 40 80 	pushm	r7,lr
80000a20:	1a 97       	mov	r7,sp
80000a22:	20 1d       	sub	sp,4
80000a24:	ef 4c ff fc 	st.w	r7[-4],r12
80000a28:	ee fc ff fc 	ld.w	r12,r7[-4]
80000a2c:	f0 1f 00 03 	mcall	80000a38 <ledToggle+0x1c>
80000a30:	2f fd       	sub	sp,-4
80000a32:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a36:	00 00       	add	r0,r0
80000a38:	80 00       	ld.sh	r0,r0[0x0]
80000a3a:	09 20       	ld.uh	r0,r4++

80000a3c <timerInit>:
80000a3c:	d5 01       	pushm	r11,lr
80000a3e:	d2 01       	pushm	r12
80000a40:	f0 1f 00 28 	mcall	80000ae0 <timerClearInterrupt+0x10>
80000a44:	f0 1f 00 28 	mcall	80000ae4 <timerClearInterrupt+0x14>
80000a48:	e0 6c 38 00 	mov	r12,14336
80000a4c:	ea 1c ff ff 	orh	r12,0xffff
80000a50:	e0 6b c0 00 	mov	r11,49152
80000a54:	ea 1b 00 00 	orh	r11,0x0
80000a58:	99 1b       	st.w	r12[0x4],r11
80000a5a:	30 1b       	mov	r11,1
80000a5c:	a5 6b       	lsl	r11,0x4
80000a5e:	99 9b       	st.w	r12[0x24],r11
80000a60:	d2 02       	popm	r12
80000a62:	f0 1f 00 22 	mcall	80000ae8 <timerClearInterrupt+0x18>
80000a66:	d5 02       	popm	r11,lr
80000a68:	1c 9f       	mov	pc,lr

80000a6a <timerReset>:
80000a6a:	d3 01       	pushm	r11-r12
80000a6c:	e0 6c 38 00 	mov	r12,14336
80000a70:	ea 1c ff ff 	orh	r12,0xffff
80000a74:	30 5b       	mov	r11,5
80000a76:	99 0b       	st.w	r12[0x0],r11
80000a78:	e0 6b 00 08 	mov	r11,8
80000a7c:	ea 1b 00 00 	orh	r11,0x0
80000a80:	76 0b       	ld.w	r11,r11[0x0]
80000a82:	99 7b       	st.w	r12[0x1c],r11
80000a84:	d3 02       	popm	r11-r12
80000a86:	1c 9f       	mov	pc,lr

80000a88 <timerStop>:
80000a88:	d3 01       	pushm	r11-r12
80000a8a:	e0 6c 38 00 	mov	r12,14336
80000a8e:	ea 1c ff ff 	orh	r12,0xffff
80000a92:	30 2b       	mov	r11,2
80000a94:	99 0b       	st.w	r12[0x0],r11
80000a96:	d3 02       	popm	r11-r12
80000a98:	1c 9f       	mov	pc,lr

80000a9a <timerRCSet>:
80000a9a:	d3 01       	pushm	r11-r12
80000a9c:	49 4b       	lddpc	r11,80000aec <timerClearInterrupt+0x1c>
80000a9e:	97 0c       	st.w	r11[0x0],r12
80000aa0:	e0 6c 38 00 	mov	r12,14336
80000aa4:	ea 1c ff ff 	orh	r12,0xffff
80000aa8:	76 0b       	ld.w	r11,r11[0x0]
80000aaa:	99 7b       	st.w	r12[0x1c],r11
80000aac:	d3 02       	popm	r11-r12
80000aae:	1c 9f       	mov	pc,lr

80000ab0 <timerPrescaleSet>:
80000ab0:	d3 81       	pushm	r10-r12
80000ab2:	49 0b       	lddpc	r11,80000af0 <timerClearInterrupt+0x20>
80000ab4:	97 0c       	st.w	r11[0x0],r12
80000ab6:	e0 6c 38 00 	mov	r12,14336
80000aba:	ea 1c ff ff 	orh	r12,0xffff
80000abe:	78 1a       	ld.w	r10,r12[0x4]
80000ac0:	3f 8b       	mov	r11,-8
80000ac2:	16 6a       	and	r10,r11
80000ac4:	48 bb       	lddpc	r11,80000af0 <timerClearInterrupt+0x20>
80000ac6:	76 0b       	ld.w	r11,r11[0x0]
80000ac8:	14 4b       	or	r11,r10
80000aca:	99 1b       	st.w	r12[0x4],r11
80000acc:	d3 82       	popm	r10-r12
80000ace:	1c 9f       	mov	pc,lr

80000ad0 <timerClearInterrupt>:
80000ad0:	d2 01       	pushm	r12
80000ad2:	e0 6c 38 00 	mov	r12,14336
80000ad6:	ea 1c ff ff 	orh	r12,0xffff
80000ada:	78 8c       	ld.w	r12,r12[0x20]
80000adc:	d2 02       	popm	r12
80000ade:	1c 9f       	mov	pc,lr
80000ae0:	80 00       	ld.sh	r0,r0[0x0]
80000ae2:	15 66       	ld.uh	r6,--r10
80000ae4:	80 00       	ld.sh	r0,r0[0x0]
80000ae6:	0a d0       	st.w	--r5,r0
80000ae8:	80 00       	ld.sh	r0,r0[0x0]
80000aea:	07 68       	ld.uh	r8,--r3
80000aec:	00 00       	add	r0,r0
80000aee:	00 08       	add	r8,r0
80000af0:	00 00       	add	r0,r0
80000af2:	00 0c       	add	r12,r0

80000af4 <_stext>:
80000af4:	49 7d       	lddpc	sp,80000b50 <udata_end+0x4>
80000af6:	49 80       	lddpc	r0,80000b54 <udata_end+0x8>
80000af8:	1a d0       	st.w	--sp,r0
80000afa:	e5 cd 20 00 	ldmts	sp,sp
80000afe:	1b 00       	ld.w	r0,sp++
80000b00:	49 60       	lddpc	r0,80000b58 <udata_end+0xc>
80000b02:	e3 b0 00 01 	mtsr	0x4,r0
80000b06:	d5 53       	csrf	0x15
80000b08:	e0 6c 0c 00 	mov	r12,3072
80000b0c:	ea 1c ff ff 	orh	r12,0xffff
80000b10:	e0 6b 01 07 	mov	r11,263
80000b14:	99 ab       	st.w	r12[0x28],r11
80000b16:	30 4b       	mov	r11,4
80000b18:	99 0b       	st.w	r12[0x0],r11
80000b1a:	e0 6a 00 80 	mov	r10,128

80000b1e <xw8>:
80000b1e:	79 5b       	ld.w	r11,r12[0x54]
80000b20:	14 7b       	tst	r11,r10
80000b22:	cf e0       	breq	80000b1e <xw8>
80000b24:	30 5b       	mov	r11,5
80000b26:	99 0b       	st.w	r12[0x0],r11

80000b28 <idata_>:
80000b28:	48 d0       	lddpc	r0,80000b5c <udata_end+0x10>
80000b2a:	48 e1       	lddpc	r1,80000b60 <udata_end+0x14>
80000b2c:	02 30       	cp.w	r0,r1
80000b2e:	c0 62       	brcc	80000b3a <idata_end>
80000b30:	48 d2       	lddpc	r2,80000b64 <udata_end+0x18>

80000b32 <idata_loop>:
80000b32:	05 04       	ld.w	r4,r2++
80000b34:	00 a4       	st.w	r0++,r4
80000b36:	02 30       	cp.w	r0,r1
80000b38:	cf d3       	brcs	80000b32 <idata_loop>

80000b3a <idata_end>:
80000b3a:	48 c0       	lddpc	r0,80000b68 <udata_end+0x1c>
80000b3c:	48 c1       	lddpc	r1,80000b6c <udata_end+0x20>
80000b3e:	02 30       	cp.w	r0,r1
80000b40:	c0 62       	brcc	80000b4c <udata_end>
80000b42:	30 02       	mov	r2,0
80000b44:	30 03       	mov	r3,0

80000b46 <udata_loop>:
80000b46:	00 a2       	st.w	r0++,r2
80000b48:	02 30       	cp.w	r0,r1
80000b4a:	cf e3       	brcs	80000b46 <udata_loop>

80000b4c <udata_end>:
80000b4c:	48 9f       	lddpc	pc,80000b70 <udata_end+0x24>
80000b4e:	00 00       	add	r0,r0
80000b50:	00 01       	add	r1,r0
80000b52:	00 00       	add	r0,r0
80000b54:	00 00       	add	r0,r0
80000b56:	f0 00       	*unknown*
80000b58:	80 00       	ld.sh	r0,r0[0x0]
80000b5a:	14 00       	add	r0,r10
80000b5c:	00 00       	add	r0,r0
80000b5e:	00 08       	add	r8,r0
80000b60:	00 00       	add	r0,r0
80000b62:	05 18       	ld.sh	r8,r2++
80000b64:	80 00       	ld.sh	r0,r0[0x0]
80000b66:	18 88       	andn	r8,r12
80000b68:	00 00       	add	r0,r0
80000b6a:	05 18       	ld.sh	r8,r2++
80000b6c:	00 00       	add	r0,r0
80000b6e:	05 98       	ld.ub	r8,r2[0x1]
80000b70:	80 00       	ld.sh	r0,r0[0x0]
80000b72:	03 9c       	ld.ub	r12,r1[0x1]

80000b74 <calloc>:
80000b74:	d4 01       	pushm	lr
80000b76:	48 48       	lddpc	r8,80000b84 <calloc+0x10>
80000b78:	16 9a       	mov	r10,r11
80000b7a:	18 9b       	mov	r11,r12
80000b7c:	70 0c       	ld.w	r12,r8[0x0]
80000b7e:	f0 1f 00 03 	mcall	80000b88 <calloc+0x14>
80000b82:	d8 02       	popm	pc
80000b84:	00 00       	add	r0,r0
80000b86:	01 00       	ld.w	r0,r0++
80000b88:	80 00       	ld.sh	r0,r0[0x0]
80000b8a:	0b 8c       	ld.ub	r12,r5[0x0]

80000b8c <_calloc_r>:
80000b8c:	d4 21       	pushm	r4-r7,lr
80000b8e:	f4 0b 02 4b 	mul	r11,r10,r11
80000b92:	f0 1f 00 15 	mcall	80000be4 <_calloc_r+0x58>
80000b96:	18 97       	mov	r7,r12
80000b98:	c2 30       	breq	80000bde <_calloc_r+0x52>
80000b9a:	f8 fa ff fc 	ld.w	r10,r12[-4]
80000b9e:	e0 1a ff fc 	andl	r10,0xfffc
80000ba2:	20 4a       	sub	r10,4
80000ba4:	e0 4a 00 24 	cp.w	r10,36
80000ba8:	e0 8b 00 18 	brhi	80000bd8 <_calloc_r+0x4c>
80000bac:	18 98       	mov	r8,r12
80000bae:	59 3a       	cp.w	r10,19
80000bb0:	e0 88 00 0f 	brls	80000bce <_calloc_r+0x42>
80000bb4:	30 09       	mov	r9,0
80000bb6:	10 a9       	st.w	r8++,r9
80000bb8:	10 a9       	st.w	r8++,r9
80000bba:	59 ba       	cp.w	r10,27
80000bbc:	e0 88 00 09 	brls	80000bce <_calloc_r+0x42>
80000bc0:	10 a9       	st.w	r8++,r9
80000bc2:	10 a9       	st.w	r8++,r9
80000bc4:	e0 4a 00 24 	cp.w	r10,36
80000bc8:	c0 31       	brne	80000bce <_calloc_r+0x42>
80000bca:	10 a9       	st.w	r8++,r9
80000bcc:	10 a9       	st.w	r8++,r9
80000bce:	30 09       	mov	r9,0
80000bd0:	10 a9       	st.w	r8++,r9
80000bd2:	91 19       	st.w	r8[0x4],r9
80000bd4:	91 09       	st.w	r8[0x0],r9
80000bd6:	c0 48       	rjmp	80000bde <_calloc_r+0x52>
80000bd8:	30 0b       	mov	r11,0
80000bda:	f0 1f 00 04 	mcall	80000be8 <_calloc_r+0x5c>
80000bde:	0e 9c       	mov	r12,r7
80000be0:	d8 22       	popm	r4-r7,pc
80000be2:	00 00       	add	r0,r0
80000be4:	80 00       	ld.sh	r0,r0[0x0]
80000be6:	0c 04       	add	r4,r6
80000be8:	80 00       	ld.sh	r0,r0[0x0]
80000bea:	10 54       	eor	r4,r8

80000bec <malloc>:
80000bec:	d4 01       	pushm	lr
80000bee:	48 48       	lddpc	r8,80000bfc <malloc+0x10>
80000bf0:	18 9b       	mov	r11,r12
80000bf2:	70 0c       	ld.w	r12,r8[0x0]
80000bf4:	f0 1f 00 03 	mcall	80000c00 <malloc+0x14>
80000bf8:	d8 02       	popm	pc
80000bfa:	00 00       	add	r0,r0
80000bfc:	00 00       	add	r0,r0
80000bfe:	01 00       	ld.w	r0,r0++
80000c00:	80 00       	ld.sh	r0,r0[0x0]
80000c02:	0c 04       	add	r4,r6

80000c04 <_malloc_r>:
80000c04:	d4 31       	pushm	r0-r7,lr
80000c06:	f6 c8 ff f5 	sub	r8,r11,-11
80000c0a:	18 95       	mov	r5,r12
80000c0c:	10 97       	mov	r7,r8
80000c0e:	e0 17 ff f8 	andl	r7,0xfff8
80000c12:	59 68       	cp.w	r8,22
80000c14:	f9 b7 08 10 	movls	r7,16
80000c18:	16 37       	cp.w	r7,r11
80000c1a:	5f 38       	srlo	r8
80000c1c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80000c20:	c0 50       	breq	80000c2a <_malloc_r+0x26>
80000c22:	30 c8       	mov	r8,12
80000c24:	99 38       	st.w	r12[0xc],r8
80000c26:	e0 8f 01 f3 	bral	8000100c <_malloc_r+0x408>
80000c2a:	f0 1f 00 50 	mcall	80000d68 <_malloc_r+0x164>
80000c2e:	e0 47 01 f7 	cp.w	r7,503
80000c32:	e0 8b 00 1c 	brhi	80000c6a <_malloc_r+0x66>
80000c36:	ee 03 16 03 	lsr	r3,r7,0x3
80000c3a:	4c d8       	lddpc	r8,80000d6c <_malloc_r+0x168>
80000c3c:	f0 03 00 38 	add	r8,r8,r3<<0x3
80000c40:	70 36       	ld.w	r6,r8[0xc]
80000c42:	10 36       	cp.w	r6,r8
80000c44:	c0 61       	brne	80000c50 <_malloc_r+0x4c>
80000c46:	ec c8 ff f8 	sub	r8,r6,-8
80000c4a:	70 36       	ld.w	r6,r8[0xc]
80000c4c:	10 36       	cp.w	r6,r8
80000c4e:	c0 c0       	breq	80000c66 <_malloc_r+0x62>
80000c50:	6c 18       	ld.w	r8,r6[0x4]
80000c52:	e0 18 ff fc 	andl	r8,0xfffc
80000c56:	6c 3a       	ld.w	r10,r6[0xc]
80000c58:	ec 08 00 09 	add	r9,r6,r8
80000c5c:	0a 9c       	mov	r12,r5
80000c5e:	6c 28       	ld.w	r8,r6[0x8]
80000c60:	95 28       	st.w	r10[0x8],r8
80000c62:	91 3a       	st.w	r8[0xc],r10
80000c64:	c4 68       	rjmp	80000cf0 <_malloc_r+0xec>
80000c66:	2f e3       	sub	r3,-2
80000c68:	c4 c8       	rjmp	80000d00 <_malloc_r+0xfc>
80000c6a:	ee 03 16 09 	lsr	r3,r7,0x9
80000c6e:	c0 41       	brne	80000c76 <_malloc_r+0x72>
80000c70:	ee 03 16 03 	lsr	r3,r7,0x3
80000c74:	c2 68       	rjmp	80000cc0 <_malloc_r+0xbc>
80000c76:	58 43       	cp.w	r3,4
80000c78:	e0 8b 00 06 	brhi	80000c84 <_malloc_r+0x80>
80000c7c:	ee 03 16 06 	lsr	r3,r7,0x6
80000c80:	2c 83       	sub	r3,-56
80000c82:	c1 f8       	rjmp	80000cc0 <_malloc_r+0xbc>
80000c84:	59 43       	cp.w	r3,20
80000c86:	e0 8b 00 04 	brhi	80000c8e <_malloc_r+0x8a>
80000c8a:	2a 53       	sub	r3,-91
80000c8c:	c1 a8       	rjmp	80000cc0 <_malloc_r+0xbc>
80000c8e:	e0 43 00 54 	cp.w	r3,84
80000c92:	e0 8b 00 06 	brhi	80000c9e <_malloc_r+0x9a>
80000c96:	ee 03 16 0c 	lsr	r3,r7,0xc
80000c9a:	29 23       	sub	r3,-110
80000c9c:	c1 28       	rjmp	80000cc0 <_malloc_r+0xbc>
80000c9e:	e0 43 01 54 	cp.w	r3,340
80000ca2:	e0 8b 00 06 	brhi	80000cae <_malloc_r+0xaa>
80000ca6:	ee 03 16 0f 	lsr	r3,r7,0xf
80000caa:	28 93       	sub	r3,-119
80000cac:	c0 a8       	rjmp	80000cc0 <_malloc_r+0xbc>
80000cae:	e0 43 05 54 	cp.w	r3,1364
80000cb2:	e0 88 00 04 	brls	80000cba <_malloc_r+0xb6>
80000cb6:	37 e3       	mov	r3,126
80000cb8:	c0 48       	rjmp	80000cc0 <_malloc_r+0xbc>
80000cba:	ee 03 16 12 	lsr	r3,r7,0x12
80000cbe:	28 43       	sub	r3,-124
80000cc0:	4a ba       	lddpc	r10,80000d6c <_malloc_r+0x168>
80000cc2:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80000cc6:	74 36       	ld.w	r6,r10[0xc]
80000cc8:	c1 98       	rjmp	80000cfa <_malloc_r+0xf6>
80000cca:	6c 19       	ld.w	r9,r6[0x4]
80000ccc:	e0 19 ff fc 	andl	r9,0xfffc
80000cd0:	f2 07 01 0b 	sub	r11,r9,r7
80000cd4:	58 fb       	cp.w	r11,15
80000cd6:	e0 8a 00 04 	brle	80000cde <_malloc_r+0xda>
80000cda:	20 13       	sub	r3,1
80000cdc:	c1 18       	rjmp	80000cfe <_malloc_r+0xfa>
80000cde:	6c 38       	ld.w	r8,r6[0xc]
80000ce0:	58 0b       	cp.w	r11,0
80000ce2:	c0 b5       	brlt	80000cf8 <_malloc_r+0xf4>
80000ce4:	6c 2a       	ld.w	r10,r6[0x8]
80000ce6:	ec 09 00 09 	add	r9,r6,r9
80000cea:	0a 9c       	mov	r12,r5
80000cec:	91 2a       	st.w	r8[0x8],r10
80000cee:	95 38       	st.w	r10[0xc],r8
80000cf0:	72 18       	ld.w	r8,r9[0x4]
80000cf2:	a1 a8       	sbr	r8,0x0
80000cf4:	93 18       	st.w	r9[0x4],r8
80000cf6:	cb c8       	rjmp	80000e6e <_malloc_r+0x26a>
80000cf8:	10 96       	mov	r6,r8
80000cfa:	14 36       	cp.w	r6,r10
80000cfc:	ce 71       	brne	80000cca <_malloc_r+0xc6>
80000cfe:	2f f3       	sub	r3,-1
80000d00:	49 ba       	lddpc	r10,80000d6c <_malloc_r+0x168>
80000d02:	f4 cc ff f8 	sub	r12,r10,-8
80000d06:	78 26       	ld.w	r6,r12[0x8]
80000d08:	18 36       	cp.w	r6,r12
80000d0a:	c6 e0       	breq	80000de6 <_malloc_r+0x1e2>
80000d0c:	6c 19       	ld.w	r9,r6[0x4]
80000d0e:	e0 19 ff fc 	andl	r9,0xfffc
80000d12:	f2 07 01 08 	sub	r8,r9,r7
80000d16:	58 f8       	cp.w	r8,15
80000d18:	e0 89 00 90 	brgt	80000e38 <_malloc_r+0x234>
80000d1c:	99 3c       	st.w	r12[0xc],r12
80000d1e:	99 2c       	st.w	r12[0x8],r12
80000d20:	58 08       	cp.w	r8,0
80000d22:	c0 55       	brlt	80000d2c <_malloc_r+0x128>
80000d24:	ec 09 00 09 	add	r9,r6,r9
80000d28:	0a 9c       	mov	r12,r5
80000d2a:	ce 3b       	rjmp	80000cf0 <_malloc_r+0xec>
80000d2c:	e0 49 01 ff 	cp.w	r9,511
80000d30:	e0 8b 00 13 	brhi	80000d56 <_malloc_r+0x152>
80000d34:	a3 99       	lsr	r9,0x3
80000d36:	f4 09 00 38 	add	r8,r10,r9<<0x3
80000d3a:	70 2b       	ld.w	r11,r8[0x8]
80000d3c:	8d 38       	st.w	r6[0xc],r8
80000d3e:	8d 2b       	st.w	r6[0x8],r11
80000d40:	97 36       	st.w	r11[0xc],r6
80000d42:	91 26       	st.w	r8[0x8],r6
80000d44:	a3 49       	asr	r9,0x2
80000d46:	74 18       	ld.w	r8,r10[0x4]
80000d48:	30 1b       	mov	r11,1
80000d4a:	f6 09 09 49 	lsl	r9,r11,r9
80000d4e:	f1 e9 10 09 	or	r9,r8,r9
80000d52:	95 19       	st.w	r10[0x4],r9
80000d54:	c4 98       	rjmp	80000de6 <_malloc_r+0x1e2>
80000d56:	f2 0a 16 09 	lsr	r10,r9,0x9
80000d5a:	58 4a       	cp.w	r10,4
80000d5c:	e0 8b 00 0a 	brhi	80000d70 <_malloc_r+0x16c>
80000d60:	f2 0a 16 06 	lsr	r10,r9,0x6
80000d64:	2c 8a       	sub	r10,-56
80000d66:	c2 38       	rjmp	80000dac <_malloc_r+0x1a8>
80000d68:	80 00       	ld.sh	r0,r0[0x0]
80000d6a:	10 62       	and	r2,r8
80000d6c:	00 00       	add	r0,r0
80000d6e:	01 04       	ld.w	r4,r0++
80000d70:	59 4a       	cp.w	r10,20
80000d72:	e0 8b 00 04 	brhi	80000d7a <_malloc_r+0x176>
80000d76:	2a 5a       	sub	r10,-91
80000d78:	c1 a8       	rjmp	80000dac <_malloc_r+0x1a8>
80000d7a:	e0 4a 00 54 	cp.w	r10,84
80000d7e:	e0 8b 00 06 	brhi	80000d8a <_malloc_r+0x186>
80000d82:	f2 0a 16 0c 	lsr	r10,r9,0xc
80000d86:	29 2a       	sub	r10,-110
80000d88:	c1 28       	rjmp	80000dac <_malloc_r+0x1a8>
80000d8a:	e0 4a 01 54 	cp.w	r10,340
80000d8e:	e0 8b 00 06 	brhi	80000d9a <_malloc_r+0x196>
80000d92:	f2 0a 16 0f 	lsr	r10,r9,0xf
80000d96:	28 9a       	sub	r10,-119
80000d98:	c0 a8       	rjmp	80000dac <_malloc_r+0x1a8>
80000d9a:	e0 4a 05 54 	cp.w	r10,1364
80000d9e:	e0 88 00 04 	brls	80000da6 <_malloc_r+0x1a2>
80000da2:	37 ea       	mov	r10,126
80000da4:	c0 48       	rjmp	80000dac <_malloc_r+0x1a8>
80000da6:	f2 0a 16 12 	lsr	r10,r9,0x12
80000daa:	28 4a       	sub	r10,-124
80000dac:	4c 8b       	lddpc	r11,80000ecc <_malloc_r+0x2c8>
80000dae:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80000db2:	68 28       	ld.w	r8,r4[0x8]
80000db4:	08 38       	cp.w	r8,r4
80000db6:	c0 e1       	brne	80000dd2 <_malloc_r+0x1ce>
80000db8:	76 19       	ld.w	r9,r11[0x4]
80000dba:	a3 4a       	asr	r10,0x2
80000dbc:	30 1e       	mov	lr,1
80000dbe:	fc 0a 09 4a 	lsl	r10,lr,r10
80000dc2:	f3 ea 10 0a 	or	r10,r9,r10
80000dc6:	10 99       	mov	r9,r8
80000dc8:	97 1a       	st.w	r11[0x4],r10
80000dca:	c0 a8       	rjmp	80000dde <_malloc_r+0x1da>
80000dcc:	70 28       	ld.w	r8,r8[0x8]
80000dce:	08 38       	cp.w	r8,r4
80000dd0:	c0 60       	breq	80000ddc <_malloc_r+0x1d8>
80000dd2:	70 1a       	ld.w	r10,r8[0x4]
80000dd4:	e0 1a ff fc 	andl	r10,0xfffc
80000dd8:	14 39       	cp.w	r9,r10
80000dda:	cf 93       	brcs	80000dcc <_malloc_r+0x1c8>
80000ddc:	70 39       	ld.w	r9,r8[0xc]
80000dde:	8d 39       	st.w	r6[0xc],r9
80000de0:	8d 28       	st.w	r6[0x8],r8
80000de2:	91 36       	st.w	r8[0xc],r6
80000de4:	93 26       	st.w	r9[0x8],r6
80000de6:	e6 08 14 02 	asr	r8,r3,0x2
80000dea:	30 1b       	mov	r11,1
80000dec:	4b 84       	lddpc	r4,80000ecc <_malloc_r+0x2c8>
80000dee:	f6 08 09 4b 	lsl	r11,r11,r8
80000df2:	68 18       	ld.w	r8,r4[0x4]
80000df4:	10 3b       	cp.w	r11,r8
80000df6:	e0 8b 00 6f 	brhi	80000ed4 <_malloc_r+0x2d0>
80000dfa:	f7 e8 00 09 	and	r9,r11,r8
80000dfe:	c0 b1       	brne	80000e14 <_malloc_r+0x210>
80000e00:	e0 13 ff fc 	andl	r3,0xfffc
80000e04:	a1 7b       	lsl	r11,0x1
80000e06:	2f c3       	sub	r3,-4
80000e08:	c0 38       	rjmp	80000e0e <_malloc_r+0x20a>
80000e0a:	2f c3       	sub	r3,-4
80000e0c:	a1 7b       	lsl	r11,0x1
80000e0e:	f7 e8 00 09 	and	r9,r11,r8
80000e12:	cf c0       	breq	80000e0a <_malloc_r+0x206>
80000e14:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80000e18:	06 92       	mov	r2,r3
80000e1a:	1c 91       	mov	r1,lr
80000e1c:	62 36       	ld.w	r6,r1[0xc]
80000e1e:	c2 e8       	rjmp	80000e7a <_malloc_r+0x276>
80000e20:	6c 1a       	ld.w	r10,r6[0x4]
80000e22:	e0 1a ff fc 	andl	r10,0xfffc
80000e26:	f4 07 01 08 	sub	r8,r10,r7
80000e2a:	58 f8       	cp.w	r8,15
80000e2c:	e0 8a 00 15 	brle	80000e56 <_malloc_r+0x252>
80000e30:	6c 3a       	ld.w	r10,r6[0xc]
80000e32:	6c 29       	ld.w	r9,r6[0x8]
80000e34:	95 29       	st.w	r10[0x8],r9
80000e36:	93 3a       	st.w	r9[0xc],r10
80000e38:	0e 99       	mov	r9,r7
80000e3a:	ec 07 00 07 	add	r7,r6,r7
80000e3e:	a1 a9       	sbr	r9,0x0
80000e40:	99 37       	st.w	r12[0xc],r7
80000e42:	99 27       	st.w	r12[0x8],r7
80000e44:	8d 19       	st.w	r6[0x4],r9
80000e46:	ee 08 09 08 	st.w	r7[r8],r8
80000e4a:	8f 2c       	st.w	r7[0x8],r12
80000e4c:	8f 3c       	st.w	r7[0xc],r12
80000e4e:	a1 a8       	sbr	r8,0x0
80000e50:	0a 9c       	mov	r12,r5
80000e52:	8f 18       	st.w	r7[0x4],r8
80000e54:	c0 d8       	rjmp	80000e6e <_malloc_r+0x26a>
80000e56:	6c 39       	ld.w	r9,r6[0xc]
80000e58:	58 08       	cp.w	r8,0
80000e5a:	c0 f5       	brlt	80000e78 <_malloc_r+0x274>
80000e5c:	ec 0a 00 0a 	add	r10,r6,r10
80000e60:	74 18       	ld.w	r8,r10[0x4]
80000e62:	a1 a8       	sbr	r8,0x0
80000e64:	0a 9c       	mov	r12,r5
80000e66:	95 18       	st.w	r10[0x4],r8
80000e68:	6c 28       	ld.w	r8,r6[0x8]
80000e6a:	93 28       	st.w	r9[0x8],r8
80000e6c:	91 39       	st.w	r8[0xc],r9
80000e6e:	f0 1f 00 19 	mcall	80000ed0 <_malloc_r+0x2cc>
80000e72:	ec cc ff f8 	sub	r12,r6,-8
80000e76:	d8 32       	popm	r0-r7,pc
80000e78:	12 96       	mov	r6,r9
80000e7a:	02 36       	cp.w	r6,r1
80000e7c:	cd 21       	brne	80000e20 <_malloc_r+0x21c>
80000e7e:	2f f2       	sub	r2,-1
80000e80:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80000e84:	c0 30       	breq	80000e8a <_malloc_r+0x286>
80000e86:	2f 81       	sub	r1,-8
80000e88:	cc ab       	rjmp	80000e1c <_malloc_r+0x218>
80000e8a:	1c 98       	mov	r8,lr
80000e8c:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80000e90:	c0 81       	brne	80000ea0 <_malloc_r+0x29c>
80000e92:	68 19       	ld.w	r9,r4[0x4]
80000e94:	f6 08 11 ff 	rsub	r8,r11,-1
80000e98:	f3 e8 00 08 	and	r8,r9,r8
80000e9c:	89 18       	st.w	r4[0x4],r8
80000e9e:	c0 78       	rjmp	80000eac <_malloc_r+0x2a8>
80000ea0:	f0 c9 00 08 	sub	r9,r8,8
80000ea4:	20 13       	sub	r3,1
80000ea6:	70 08       	ld.w	r8,r8[0x0]
80000ea8:	12 38       	cp.w	r8,r9
80000eaa:	cf 10       	breq	80000e8c <_malloc_r+0x288>
80000eac:	a1 7b       	lsl	r11,0x1
80000eae:	68 18       	ld.w	r8,r4[0x4]
80000eb0:	10 3b       	cp.w	r11,r8
80000eb2:	e0 8b 00 11 	brhi	80000ed4 <_malloc_r+0x2d0>
80000eb6:	58 0b       	cp.w	r11,0
80000eb8:	c0 e0       	breq	80000ed4 <_malloc_r+0x2d0>
80000eba:	04 93       	mov	r3,r2
80000ebc:	c0 38       	rjmp	80000ec2 <_malloc_r+0x2be>
80000ebe:	2f c3       	sub	r3,-4
80000ec0:	a1 7b       	lsl	r11,0x1
80000ec2:	f7 e8 00 09 	and	r9,r11,r8
80000ec6:	ca 71       	brne	80000e14 <_malloc_r+0x210>
80000ec8:	cf bb       	rjmp	80000ebe <_malloc_r+0x2ba>
80000eca:	00 00       	add	r0,r0
80000ecc:	00 00       	add	r0,r0
80000ece:	01 04       	ld.w	r4,r0++
80000ed0:	80 00       	ld.sh	r0,r0[0x0]
80000ed2:	10 64       	and	r4,r8
80000ed4:	68 23       	ld.w	r3,r4[0x8]
80000ed6:	66 12       	ld.w	r2,r3[0x4]
80000ed8:	e0 12 ff fc 	andl	r2,0xfffc
80000edc:	0e 32       	cp.w	r2,r7
80000ede:	5f 39       	srlo	r9
80000ee0:	e4 07 01 08 	sub	r8,r2,r7
80000ee4:	58 f8       	cp.w	r8,15
80000ee6:	5f aa       	srle	r10
80000ee8:	f5 e9 10 09 	or	r9,r10,r9
80000eec:	e0 80 00 a2 	breq	80001030 <_malloc_r+0x42c>
80000ef0:	4c 88       	lddpc	r8,80001010 <_malloc_r+0x40c>
80000ef2:	70 01       	ld.w	r1,r8[0x0]
80000ef4:	4c 88       	lddpc	r8,80001014 <_malloc_r+0x410>
80000ef6:	2f 01       	sub	r1,-16
80000ef8:	70 08       	ld.w	r8,r8[0x0]
80000efa:	0e 01       	add	r1,r7
80000efc:	5b f8       	cp.w	r8,-1
80000efe:	c0 40       	breq	80000f06 <_malloc_r+0x302>
80000f00:	28 11       	sub	r1,-127
80000f02:	e0 11 ff 80 	andl	r1,0xff80
80000f06:	02 9b       	mov	r11,r1
80000f08:	0a 9c       	mov	r12,r5
80000f0a:	f0 1f 00 44 	mcall	80001018 <_malloc_r+0x414>
80000f0e:	18 96       	mov	r6,r12
80000f10:	5b fc       	cp.w	r12,-1
80000f12:	c6 e0       	breq	80000fee <_malloc_r+0x3ea>
80000f14:	e6 02 00 08 	add	r8,r3,r2
80000f18:	10 3c       	cp.w	r12,r8
80000f1a:	c0 32       	brcc	80000f20 <_malloc_r+0x31c>
80000f1c:	08 33       	cp.w	r3,r4
80000f1e:	c6 81       	brne	80000fee <_malloc_r+0x3ea>
80000f20:	4b fa       	lddpc	r10,8000101c <_malloc_r+0x418>
80000f22:	74 09       	ld.w	r9,r10[0x0]
80000f24:	e2 09 00 09 	add	r9,r1,r9
80000f28:	95 09       	st.w	r10[0x0],r9
80000f2a:	10 36       	cp.w	r6,r8
80000f2c:	c0 a1       	brne	80000f40 <_malloc_r+0x33c>
80000f2e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80000f32:	c0 71       	brne	80000f40 <_malloc_r+0x33c>
80000f34:	e2 02 00 02 	add	r2,r1,r2
80000f38:	68 28       	ld.w	r8,r4[0x8]
80000f3a:	a1 a2       	sbr	r2,0x0
80000f3c:	91 12       	st.w	r8[0x4],r2
80000f3e:	c4 c8       	rjmp	80000fd6 <_malloc_r+0x3d2>
80000f40:	4b 5a       	lddpc	r10,80001014 <_malloc_r+0x410>
80000f42:	74 0b       	ld.w	r11,r10[0x0]
80000f44:	5b fb       	cp.w	r11,-1
80000f46:	c0 31       	brne	80000f4c <_malloc_r+0x348>
80000f48:	95 06       	st.w	r10[0x0],r6
80000f4a:	c0 68       	rjmp	80000f56 <_malloc_r+0x352>
80000f4c:	ec 09 00 09 	add	r9,r6,r9
80000f50:	4b 3a       	lddpc	r10,8000101c <_malloc_r+0x418>
80000f52:	10 19       	sub	r9,r8
80000f54:	95 09       	st.w	r10[0x0],r9
80000f56:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80000f5a:	f0 09 11 08 	rsub	r9,r8,8
80000f5e:	58 08       	cp.w	r8,0
80000f60:	f2 08 17 10 	movne	r8,r9
80000f64:	ed d8 e1 06 	addne	r6,r6,r8
80000f68:	28 08       	sub	r8,-128
80000f6a:	ec 01 00 01 	add	r1,r6,r1
80000f6e:	0a 9c       	mov	r12,r5
80000f70:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80000f74:	f0 01 01 01 	sub	r1,r8,r1
80000f78:	02 9b       	mov	r11,r1
80000f7a:	f0 1f 00 28 	mcall	80001018 <_malloc_r+0x414>
80000f7e:	4a 88       	lddpc	r8,8000101c <_malloc_r+0x418>
80000f80:	5b fc       	cp.w	r12,-1
80000f82:	ec 0c 17 00 	moveq	r12,r6
80000f86:	f9 b1 00 00 	moveq	r1,0
80000f8a:	70 09       	ld.w	r9,r8[0x0]
80000f8c:	0c 1c       	sub	r12,r6
80000f8e:	89 26       	st.w	r4[0x8],r6
80000f90:	02 0c       	add	r12,r1
80000f92:	12 01       	add	r1,r9
80000f94:	a1 ac       	sbr	r12,0x0
80000f96:	91 01       	st.w	r8[0x0],r1
80000f98:	8d 1c       	st.w	r6[0x4],r12
80000f9a:	08 33       	cp.w	r3,r4
80000f9c:	c1 d0       	breq	80000fd6 <_malloc_r+0x3d2>
80000f9e:	58 f2       	cp.w	r2,15
80000fa0:	e0 8b 00 05 	brhi	80000faa <_malloc_r+0x3a6>
80000fa4:	30 18       	mov	r8,1
80000fa6:	8d 18       	st.w	r6[0x4],r8
80000fa8:	c2 38       	rjmp	80000fee <_malloc_r+0x3ea>
80000faa:	30 59       	mov	r9,5
80000fac:	20 c2       	sub	r2,12
80000fae:	e0 12 ff f8 	andl	r2,0xfff8
80000fb2:	e6 02 00 08 	add	r8,r3,r2
80000fb6:	91 29       	st.w	r8[0x8],r9
80000fb8:	91 19       	st.w	r8[0x4],r9
80000fba:	66 18       	ld.w	r8,r3[0x4]
80000fbc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000fc0:	e5 e8 10 08 	or	r8,r2,r8
80000fc4:	87 18       	st.w	r3[0x4],r8
80000fc6:	58 f2       	cp.w	r2,15
80000fc8:	e0 88 00 07 	brls	80000fd6 <_malloc_r+0x3d2>
80000fcc:	e6 cb ff f8 	sub	r11,r3,-8
80000fd0:	0a 9c       	mov	r12,r5
80000fd2:	f0 1f 00 14 	mcall	80001020 <_malloc_r+0x41c>
80000fd6:	49 49       	lddpc	r9,80001024 <_malloc_r+0x420>
80000fd8:	72 0a       	ld.w	r10,r9[0x0]
80000fda:	49 18       	lddpc	r8,8000101c <_malloc_r+0x418>
80000fdc:	70 08       	ld.w	r8,r8[0x0]
80000fde:	14 38       	cp.w	r8,r10
80000fe0:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80000fe4:	49 19       	lddpc	r9,80001028 <_malloc_r+0x424>
80000fe6:	72 0a       	ld.w	r10,r9[0x0]
80000fe8:	14 38       	cp.w	r8,r10
80000fea:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80000fee:	68 28       	ld.w	r8,r4[0x8]
80000ff0:	70 18       	ld.w	r8,r8[0x4]
80000ff2:	e0 18 ff fc 	andl	r8,0xfffc
80000ff6:	0e 38       	cp.w	r8,r7
80000ff8:	5f 39       	srlo	r9
80000ffa:	0e 18       	sub	r8,r7
80000ffc:	58 f8       	cp.w	r8,15
80000ffe:	5f aa       	srle	r10
80001000:	f5 e9 10 09 	or	r9,r10,r9
80001004:	c1 60       	breq	80001030 <_malloc_r+0x42c>
80001006:	0a 9c       	mov	r12,r5
80001008:	f0 1f 00 09 	mcall	8000102c <_malloc_r+0x428>
8000100c:	d8 3a       	popm	r0-r7,pc,r12=0
8000100e:	00 00       	add	r0,r0
80001010:	00 00       	add	r0,r0
80001012:	05 20       	ld.uh	r0,r2++
80001014:	00 00       	add	r0,r0
80001016:	05 10       	ld.sh	r0,r2++
80001018:	80 00       	ld.sh	r0,r0[0x0]
8000101a:	10 68       	and	r8,r8
8000101c:	00 00       	add	r0,r0
8000101e:	05 24       	ld.uh	r4,r2++
80001020:	80 00       	ld.sh	r0,r0[0x0]
80001022:	11 84       	ld.ub	r4,r8[0x0]
80001024:	00 00       	add	r0,r0
80001026:	05 1c       	ld.sh	r12,r2++
80001028:	00 00       	add	r0,r0
8000102a:	05 18       	ld.sh	r8,r2++
8000102c:	80 00       	ld.sh	r0,r0[0x0]
8000102e:	10 64       	and	r4,r8
80001030:	68 26       	ld.w	r6,r4[0x8]
80001032:	a1 a8       	sbr	r8,0x0
80001034:	0e 99       	mov	r9,r7
80001036:	a1 a9       	sbr	r9,0x0
80001038:	8d 19       	st.w	r6[0x4],r9
8000103a:	ec 07 00 07 	add	r7,r6,r7
8000103e:	0a 9c       	mov	r12,r5
80001040:	89 27       	st.w	r4[0x8],r7
80001042:	8f 18       	st.w	r7[0x4],r8
80001044:	f0 1f 00 03 	mcall	80001050 <_malloc_r+0x44c>
80001048:	ec cc ff f8 	sub	r12,r6,-8
8000104c:	d8 32       	popm	r0-r7,pc
8000104e:	00 00       	add	r0,r0
80001050:	80 00       	ld.sh	r0,r0[0x0]
80001052:	10 64       	and	r4,r8

80001054 <memset>:
80001054:	18 98       	mov	r8,r12
80001056:	c0 38       	rjmp	8000105c <memset+0x8>
80001058:	10 cb       	st.b	r8++,r11
8000105a:	20 1a       	sub	r10,1
8000105c:	58 0a       	cp.w	r10,0
8000105e:	cf d1       	brne	80001058 <memset+0x4>
80001060:	5e fc       	retal	r12

80001062 <__malloc_lock>:
80001062:	5e fc       	retal	r12

80001064 <__malloc_unlock>:
80001064:	5e fc       	retal	r12
80001066:	d7 03       	nop

80001068 <_sbrk_r>:
80001068:	d4 21       	pushm	r4-r7,lr
8000106a:	30 08       	mov	r8,0
8000106c:	18 97       	mov	r7,r12
8000106e:	48 76       	lddpc	r6,80001088 <_sbrk_r+0x20>
80001070:	16 9c       	mov	r12,r11
80001072:	8d 08       	st.w	r6[0x0],r8
80001074:	f0 1f 00 06 	mcall	8000108c <_sbrk_r+0x24>
80001078:	5b fc       	cp.w	r12,-1
8000107a:	c0 51       	brne	80001084 <_sbrk_r+0x1c>
8000107c:	6c 08       	ld.w	r8,r6[0x0]
8000107e:	58 08       	cp.w	r8,0
80001080:	ef f8 1a 03 	st.wne	r7[0xc],r8
80001084:	d8 22       	popm	r4-r7,pc
80001086:	00 00       	add	r0,r0
80001088:	00 00       	add	r0,r0
8000108a:	05 90       	ld.ub	r0,r2[0x1]
8000108c:	80 00       	ld.sh	r0,r0[0x0]
8000108e:	10 90       	mov	r0,r8

80001090 <_sbrk>:
80001090:	d4 01       	pushm	lr
80001092:	48 c8       	lddpc	r8,800010c0 <_sbrk+0x30>
80001094:	70 09       	ld.w	r9,r8[0x0]
80001096:	58 09       	cp.w	r9,0
80001098:	c0 31       	brne	8000109e <_sbrk+0xe>
8000109a:	48 b9       	lddpc	r9,800010c4 <_sbrk+0x34>
8000109c:	91 09       	st.w	r8[0x0],r9
8000109e:	48 99       	lddpc	r9,800010c0 <_sbrk+0x30>
800010a0:	48 aa       	lddpc	r10,800010c8 <_sbrk+0x38>
800010a2:	72 08       	ld.w	r8,r9[0x0]
800010a4:	f0 0c 00 0c 	add	r12,r8,r12
800010a8:	14 3c       	cp.w	r12,r10
800010aa:	e0 8b 00 04 	brhi	800010b2 <_sbrk+0x22>
800010ae:	93 0c       	st.w	r9[0x0],r12
800010b0:	c0 68       	rjmp	800010bc <_sbrk+0x2c>
800010b2:	f0 1f 00 07 	mcall	800010cc <_sbrk+0x3c>
800010b6:	30 c8       	mov	r8,12
800010b8:	99 08       	st.w	r12[0x0],r8
800010ba:	3f f8       	mov	r8,-1
800010bc:	10 9c       	mov	r12,r8
800010be:	d8 02       	popm	pc
800010c0:	00 00       	add	r0,r0
800010c2:	05 4c       	ld.w	r12,--r2
800010c4:	00 00       	add	r0,r0
800010c6:	05 98       	ld.ub	r8,r2[0x1]
800010c8:	00 00       	add	r0,r0
800010ca:	e0 00       	*unknown*
800010cc:	80 00       	ld.sh	r0,r0[0x0]
800010ce:	10 d0       	st.w	--r8,r0

800010d0 <__errno>:
800010d0:	48 28       	lddpc	r8,800010d8 <__errno+0x8>
800010d2:	70 0c       	ld.w	r12,r8[0x0]
800010d4:	2f 4c       	sub	r12,-12
800010d6:	5e fc       	retal	r12
800010d8:	00 00       	add	r0,r0
800010da:	01 00       	ld.w	r0,r0++

800010dc <_malloc_trim_r>:
800010dc:	d4 21       	pushm	r4-r7,lr
800010de:	16 95       	mov	r5,r11
800010e0:	18 97       	mov	r7,r12
800010e2:	f0 1f 00 23 	mcall	8000116c <_malloc_trim_r+0x90>
800010e6:	4a 34       	lddpc	r4,80001170 <_malloc_trim_r+0x94>
800010e8:	68 28       	ld.w	r8,r4[0x8]
800010ea:	70 16       	ld.w	r6,r8[0x4]
800010ec:	e0 16 ff fc 	andl	r6,0xfffc
800010f0:	ec c8 ff 91 	sub	r8,r6,-111
800010f4:	f0 05 01 05 	sub	r5,r8,r5
800010f8:	e0 15 ff 80 	andl	r5,0xff80
800010fc:	ea c5 00 80 	sub	r5,r5,128
80001100:	e0 45 00 7f 	cp.w	r5,127
80001104:	e0 8a 00 23 	brle	8000114a <_malloc_trim_r+0x6e>
80001108:	30 0b       	mov	r11,0
8000110a:	0e 9c       	mov	r12,r7
8000110c:	f0 1f 00 1a 	mcall	80001174 <_malloc_trim_r+0x98>
80001110:	68 28       	ld.w	r8,r4[0x8]
80001112:	0c 08       	add	r8,r6
80001114:	10 3c       	cp.w	r12,r8
80001116:	c1 a1       	brne	8000114a <_malloc_trim_r+0x6e>
80001118:	ea 0b 11 00 	rsub	r11,r5,0
8000111c:	0e 9c       	mov	r12,r7
8000111e:	f0 1f 00 16 	mcall	80001174 <_malloc_trim_r+0x98>
80001122:	5b fc       	cp.w	r12,-1
80001124:	c1 71       	brne	80001152 <_malloc_trim_r+0x76>
80001126:	30 0b       	mov	r11,0
80001128:	0e 9c       	mov	r12,r7
8000112a:	f0 1f 00 13 	mcall	80001174 <_malloc_trim_r+0x98>
8000112e:	68 28       	ld.w	r8,r4[0x8]
80001130:	f8 08 01 09 	sub	r9,r12,r8
80001134:	58 f9       	cp.w	r9,15
80001136:	e0 8a 00 0a 	brle	8000114a <_malloc_trim_r+0x6e>
8000113a:	a1 a9       	sbr	r9,0x0
8000113c:	91 19       	st.w	r8[0x4],r9
8000113e:	48 f8       	lddpc	r8,80001178 <_malloc_trim_r+0x9c>
80001140:	70 09       	ld.w	r9,r8[0x0]
80001142:	48 f8       	lddpc	r8,8000117c <_malloc_trim_r+0xa0>
80001144:	f8 09 01 09 	sub	r9,r12,r9
80001148:	91 09       	st.w	r8[0x0],r9
8000114a:	0e 9c       	mov	r12,r7
8000114c:	f0 1f 00 0d 	mcall	80001180 <_malloc_trim_r+0xa4>
80001150:	d8 2a       	popm	r4-r7,pc,r12=0
80001152:	68 28       	ld.w	r8,r4[0x8]
80001154:	0a 16       	sub	r6,r5
80001156:	a1 a6       	sbr	r6,0x0
80001158:	91 16       	st.w	r8[0x4],r6
8000115a:	48 98       	lddpc	r8,8000117c <_malloc_trim_r+0xa0>
8000115c:	70 09       	ld.w	r9,r8[0x0]
8000115e:	0a 19       	sub	r9,r5
80001160:	0e 9c       	mov	r12,r7
80001162:	91 09       	st.w	r8[0x0],r9
80001164:	f0 1f 00 07 	mcall	80001180 <_malloc_trim_r+0xa4>
80001168:	da 2a       	popm	r4-r7,pc,r12=1
8000116a:	00 00       	add	r0,r0
8000116c:	80 00       	ld.sh	r0,r0[0x0]
8000116e:	10 62       	and	r2,r8
80001170:	00 00       	add	r0,r0
80001172:	01 04       	ld.w	r4,r0++
80001174:	80 00       	ld.sh	r0,r0[0x0]
80001176:	10 68       	and	r8,r8
80001178:	00 00       	add	r0,r0
8000117a:	05 10       	ld.sh	r0,r2++
8000117c:	00 00       	add	r0,r0
8000117e:	05 24       	ld.uh	r4,r2++
80001180:	80 00       	ld.sh	r0,r0[0x0]
80001182:	10 64       	and	r4,r8

80001184 <_free_r>:
80001184:	d4 21       	pushm	r4-r7,lr
80001186:	16 96       	mov	r6,r11
80001188:	18 97       	mov	r7,r12
8000118a:	58 0b       	cp.w	r11,0
8000118c:	e0 80 00 c8 	breq	8000131c <_free_r+0x198>
80001190:	f0 1f 00 4c 	mcall	800012c0 <_free_r+0x13c>
80001194:	20 86       	sub	r6,8
80001196:	4c ca       	lddpc	r10,800012c4 <_free_r+0x140>
80001198:	6c 18       	ld.w	r8,r6[0x4]
8000119a:	74 2e       	ld.w	lr,r10[0x8]
8000119c:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800011a0:	a1 c8       	cbr	r8,0x0
800011a2:	ec 08 00 09 	add	r9,r6,r8
800011a6:	72 1b       	ld.w	r11,r9[0x4]
800011a8:	e0 1b ff fc 	andl	r11,0xfffc
800011ac:	1c 39       	cp.w	r9,lr
800011ae:	c1 d1       	brne	800011e8 <_free_r+0x64>
800011b0:	f6 08 00 08 	add	r8,r11,r8
800011b4:	58 0c       	cp.w	r12,0
800011b6:	c0 81       	brne	800011c6 <_free_r+0x42>
800011b8:	6c 09       	ld.w	r9,r6[0x0]
800011ba:	12 16       	sub	r6,r9
800011bc:	12 08       	add	r8,r9
800011be:	6c 3b       	ld.w	r11,r6[0xc]
800011c0:	6c 29       	ld.w	r9,r6[0x8]
800011c2:	97 29       	st.w	r11[0x8],r9
800011c4:	93 3b       	st.w	r9[0xc],r11
800011c6:	10 99       	mov	r9,r8
800011c8:	95 26       	st.w	r10[0x8],r6
800011ca:	a1 a9       	sbr	r9,0x0
800011cc:	8d 19       	st.w	r6[0x4],r9
800011ce:	4b f9       	lddpc	r9,800012c8 <_free_r+0x144>
800011d0:	72 09       	ld.w	r9,r9[0x0]
800011d2:	12 38       	cp.w	r8,r9
800011d4:	c0 63       	brcs	800011e0 <_free_r+0x5c>
800011d6:	4b e8       	lddpc	r8,800012cc <_free_r+0x148>
800011d8:	0e 9c       	mov	r12,r7
800011da:	70 0b       	ld.w	r11,r8[0x0]
800011dc:	f0 1f 00 3d 	mcall	800012d0 <_free_r+0x14c>
800011e0:	0e 9c       	mov	r12,r7
800011e2:	f0 1f 00 3d 	mcall	800012d4 <_free_r+0x150>
800011e6:	d8 22       	popm	r4-r7,pc
800011e8:	93 1b       	st.w	r9[0x4],r11
800011ea:	58 0c       	cp.w	r12,0
800011ec:	c0 30       	breq	800011f2 <_free_r+0x6e>
800011ee:	30 0c       	mov	r12,0
800011f0:	c1 08       	rjmp	80001210 <_free_r+0x8c>
800011f2:	6c 0e       	ld.w	lr,r6[0x0]
800011f4:	f4 c5 ff f8 	sub	r5,r10,-8
800011f8:	1c 16       	sub	r6,lr
800011fa:	1c 08       	add	r8,lr
800011fc:	6c 2e       	ld.w	lr,r6[0x8]
800011fe:	0a 3e       	cp.w	lr,r5
80001200:	f9 bc 00 01 	moveq	r12,1
80001204:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001208:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000120c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001210:	f2 0b 00 0e 	add	lr,r9,r11
80001214:	7c 1e       	ld.w	lr,lr[0x4]
80001216:	ed be 00 00 	bld	lr,0x0
8000121a:	c1 30       	breq	80001240 <_free_r+0xbc>
8000121c:	16 08       	add	r8,r11
8000121e:	58 0c       	cp.w	r12,0
80001220:	c0 c1       	brne	80001238 <_free_r+0xb4>
80001222:	4a 9e       	lddpc	lr,800012c4 <_free_r+0x140>
80001224:	72 2b       	ld.w	r11,r9[0x8]
80001226:	2f 8e       	sub	lr,-8
80001228:	1c 3b       	cp.w	r11,lr
8000122a:	c0 71       	brne	80001238 <_free_r+0xb4>
8000122c:	97 36       	st.w	r11[0xc],r6
8000122e:	97 26       	st.w	r11[0x8],r6
80001230:	8d 2b       	st.w	r6[0x8],r11
80001232:	8d 3b       	st.w	r6[0xc],r11
80001234:	30 1c       	mov	r12,1
80001236:	c0 58       	rjmp	80001240 <_free_r+0xbc>
80001238:	72 2b       	ld.w	r11,r9[0x8]
8000123a:	72 39       	ld.w	r9,r9[0xc]
8000123c:	93 2b       	st.w	r9[0x8],r11
8000123e:	97 39       	st.w	r11[0xc],r9
80001240:	10 99       	mov	r9,r8
80001242:	ec 08 09 08 	st.w	r6[r8],r8
80001246:	a1 a9       	sbr	r9,0x0
80001248:	8d 19       	st.w	r6[0x4],r9
8000124a:	58 0c       	cp.w	r12,0
8000124c:	c6 51       	brne	80001316 <_free_r+0x192>
8000124e:	e0 48 01 ff 	cp.w	r8,511
80001252:	e0 8b 00 13 	brhi	80001278 <_free_r+0xf4>
80001256:	a3 98       	lsr	r8,0x3
80001258:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000125c:	72 2b       	ld.w	r11,r9[0x8]
8000125e:	8d 39       	st.w	r6[0xc],r9
80001260:	8d 2b       	st.w	r6[0x8],r11
80001262:	97 36       	st.w	r11[0xc],r6
80001264:	93 26       	st.w	r9[0x8],r6
80001266:	a3 48       	asr	r8,0x2
80001268:	74 19       	ld.w	r9,r10[0x4]
8000126a:	30 1b       	mov	r11,1
8000126c:	f6 08 09 48 	lsl	r8,r11,r8
80001270:	f3 e8 10 08 	or	r8,r9,r8
80001274:	95 18       	st.w	r10[0x4],r8
80001276:	c5 08       	rjmp	80001316 <_free_r+0x192>
80001278:	f0 0b 16 09 	lsr	r11,r8,0x9
8000127c:	58 4b       	cp.w	r11,4
8000127e:	e0 8b 00 06 	brhi	8000128a <_free_r+0x106>
80001282:	f0 0b 16 06 	lsr	r11,r8,0x6
80001286:	2c 8b       	sub	r11,-56
80001288:	c2 b8       	rjmp	800012de <_free_r+0x15a>
8000128a:	59 4b       	cp.w	r11,20
8000128c:	e0 8b 00 04 	brhi	80001294 <_free_r+0x110>
80001290:	2a 5b       	sub	r11,-91
80001292:	c2 68       	rjmp	800012de <_free_r+0x15a>
80001294:	e0 4b 00 54 	cp.w	r11,84
80001298:	e0 8b 00 06 	brhi	800012a4 <_free_r+0x120>
8000129c:	f0 0b 16 0c 	lsr	r11,r8,0xc
800012a0:	29 2b       	sub	r11,-110
800012a2:	c1 e8       	rjmp	800012de <_free_r+0x15a>
800012a4:	e0 4b 01 54 	cp.w	r11,340
800012a8:	e0 8b 00 06 	brhi	800012b4 <_free_r+0x130>
800012ac:	f0 0b 16 0f 	lsr	r11,r8,0xf
800012b0:	28 9b       	sub	r11,-119
800012b2:	c1 68       	rjmp	800012de <_free_r+0x15a>
800012b4:	e0 4b 05 54 	cp.w	r11,1364
800012b8:	e0 88 00 10 	brls	800012d8 <_free_r+0x154>
800012bc:	37 eb       	mov	r11,126
800012be:	c1 08       	rjmp	800012de <_free_r+0x15a>
800012c0:	80 00       	ld.sh	r0,r0[0x0]
800012c2:	10 62       	and	r2,r8
800012c4:	00 00       	add	r0,r0
800012c6:	01 04       	ld.w	r4,r0++
800012c8:	00 00       	add	r0,r0
800012ca:	05 0c       	ld.w	r12,r2++
800012cc:	00 00       	add	r0,r0
800012ce:	05 20       	ld.uh	r0,r2++
800012d0:	80 00       	ld.sh	r0,r0[0x0]
800012d2:	10 dc       	st.w	--r8,r12
800012d4:	80 00       	ld.sh	r0,r0[0x0]
800012d6:	10 64       	and	r4,r8
800012d8:	f0 0b 16 12 	lsr	r11,r8,0x12
800012dc:	28 4b       	sub	r11,-124
800012de:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800012e2:	78 29       	ld.w	r9,r12[0x8]
800012e4:	18 39       	cp.w	r9,r12
800012e6:	c0 e1       	brne	80001302 <_free_r+0x17e>
800012e8:	74 18       	ld.w	r8,r10[0x4]
800012ea:	a3 4b       	asr	r11,0x2
800012ec:	30 1c       	mov	r12,1
800012ee:	f8 0b 09 4b 	lsl	r11,r12,r11
800012f2:	f1 eb 10 0b 	or	r11,r8,r11
800012f6:	12 98       	mov	r8,r9
800012f8:	95 1b       	st.w	r10[0x4],r11
800012fa:	c0 a8       	rjmp	8000130e <_free_r+0x18a>
800012fc:	72 29       	ld.w	r9,r9[0x8]
800012fe:	18 39       	cp.w	r9,r12
80001300:	c0 60       	breq	8000130c <_free_r+0x188>
80001302:	72 1a       	ld.w	r10,r9[0x4]
80001304:	e0 1a ff fc 	andl	r10,0xfffc
80001308:	14 38       	cp.w	r8,r10
8000130a:	cf 93       	brcs	800012fc <_free_r+0x178>
8000130c:	72 38       	ld.w	r8,r9[0xc]
8000130e:	8d 38       	st.w	r6[0xc],r8
80001310:	8d 29       	st.w	r6[0x8],r9
80001312:	93 36       	st.w	r9[0xc],r6
80001314:	91 26       	st.w	r8[0x8],r6
80001316:	0e 9c       	mov	r12,r7
80001318:	f0 1f 00 02 	mcall	80001320 <_free_r+0x19c>
8000131c:	d8 22       	popm	r4-r7,pc
8000131e:	00 00       	add	r0,r0
80001320:	80 00       	ld.sh	r0,r0[0x0]
80001322:	10 64       	and	r4,r8

Disassembly of section .exception:

80001400 <_evba>:
	...

80001428 <_handle_Privilege_Violation>:
80001428:	c7 a8       	rjmp	8000151c <privilegedCalls>
	...

80001500 <_handle_Supervisor_Call>:
80001500:	1c 9f       	mov	pc,lr

80001502 <_int0>:
80001502:	e0 6c 08 00 	mov	r12,2048
80001506:	ea 1c ff ff 	orh	r12,0xffff
8000150a:	f8 fc 01 38 	ld.w	r12,r12[312]
8000150e:	e0 1c 00 01 	andl	r12,0x1
80001512:	58 1c       	cp.w	r12,1
80001514:	c0 31       	brne	8000151a <_int0_exit>
80001516:	4b 9c       	lddpc	r12,800015f8 <contextRestoreFromISR+0x40>
80001518:	18 9f       	mov	pc,r12

8000151a <_int0_exit>:
8000151a:	d6 03       	rete

8000151c <privilegedCalls>:
8000151c:	d3 01       	pushm	r11-r12
8000151e:	7a 3b       	ld.w	r11,sp[0xc]
80001520:	16 9c       	mov	r12,r11
80001522:	2f ec       	sub	r12,-2
80001524:	9b 3c       	st.w	sp[0xc],r12

80001526 <priv_interruptdisable>:
80001526:	4b 6c       	lddpc	r12,800015fc <contextRestoreFromISR+0x44>
80001528:	18 3b       	cp.w	r11,r12
8000152a:	c0 61       	brne	80001536 <priv_interruptenable>
8000152c:	7a 2c       	ld.w	r12,sp[0x8]
8000152e:	b1 ac       	sbr	r12,0x10
80001530:	9b 2c       	st.w	sp[0x8],r12
80001532:	d3 02       	popm	r11-r12
80001534:	d6 03       	rete

80001536 <priv_interruptenable>:
80001536:	4b 3c       	lddpc	r12,80001600 <contextRestoreFromISR+0x48>
80001538:	18 3b       	cp.w	r11,r12
8000153a:	c0 61       	brne	80001546 <privexception>
8000153c:	7a 2c       	ld.w	r12,sp[0x8]
8000153e:	b1 cc       	cbr	r12,0x10
80001540:	9b 2c       	st.w	sp[0x8],r12
80001542:	d3 02       	popm	r11-r12
80001544:	d6 03       	rete

80001546 <privexception>:
80001546:	c0 08       	rjmp	80001546 <privexception>

80001548 <interruptInit>:
80001548:	d7 01       	pushm	r11-r12,lr
8000154a:	fe cb 00 48 	sub	r11,pc,72
8000154e:	4a ec       	lddpc	r12,80001604 <contextRestoreFromISR+0x4c>
80001550:	18 1b       	sub	r11,r12
80001552:	30 0c       	mov	r12,0
80001554:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e
80001558:	e0 6c 08 38 	mov	r12,2104
8000155c:	ea 1c ff ff 	orh	r12,0xffff
80001560:	99 0b       	st.w	r12[0x0],r11
80001562:	d7 02       	popm	r11-r12,lr
80001564:	1c 9f       	mov	pc,lr

80001566 <interruptDisable>:
80001566:	d3 03       	ssrf	0x10
80001568:	1c 9f       	mov	pc,lr

8000156a <interruptEnable>:
8000156a:	d5 03       	csrf	0x10
8000156c:	1c 9f       	mov	pc,lr

8000156e <isInterruptEnabled>:
8000156e:	e1 bc 00 00 	mfsr	r12,0x0
80001572:	b1 8c       	lsr	r12,0x10
80001574:	e0 1c 00 01 	andl	r12,0x1
80001578:	ec 1c 00 01 	eorl	r12,0x1
8000157c:	1c 9f       	mov	pc,lr

8000157e <contextSaveFromISR>:
8000157e:	4a 3c       	lddpc	r12,80001608 <contextRestoreFromISR+0x50>
80001580:	78 0c       	ld.w	r12,r12[0x0]
80001582:	99 60       	st.w	r12[0x18],r0
80001584:	7a 90       	ld.w	r0,sp[0x24]
80001586:	99 c0       	st.w	r12[0x30],r0
80001588:	7a 60       	ld.w	r0,sp[0x18]
8000158a:	99 80       	st.w	r12[0x20],r0
8000158c:	7a d8       	ld.w	r8,sp[0x34]
8000158e:	7a c9       	ld.w	r9,sp[0x30]
80001590:	7a ba       	ld.w	r10,sp[0x2c]
80001592:	7a ab       	ld.w	r11,sp[0x28]
80001594:	33 40       	mov	r0,52
80001596:	18 00       	add	r0,r12
80001598:	ed c0 0f ff 	stmts	r0,r0-r11
8000159c:	7a 50       	ld.w	r0,sp[0x14]
8000159e:	f9 40 00 44 	st.w	r12[68],r0
800015a2:	7a 70       	ld.w	r0,sp[0x1c]
800015a4:	99 90       	st.w	r12[0x24],r0
800015a6:	7a 80       	ld.w	r0,sp[0x20]
800015a8:	99 a0       	st.w	r12[0x28],r0
800015aa:	1a 90       	mov	r0,sp
800015ac:	1a d0       	st.w	--sp,r0
800015ae:	ed cd 20 00 	stmts	sp,sp
800015b2:	1b 00       	ld.w	r0,sp++
800015b4:	99 50       	st.w	r12[0x14],r0
800015b6:	1c 9f       	mov	pc,lr

800015b8 <contextRestoreFromISR>:
800015b8:	49 4c       	lddpc	r12,80001608 <contextRestoreFromISR+0x50>
800015ba:	78 0c       	ld.w	r12,r12[0x0]
800015bc:	78 50       	ld.w	r0,r12[0x14]
800015be:	1a d0       	st.w	--sp,r0
800015c0:	e5 cd 20 00 	ldmts	sp,sp
800015c4:	1b 00       	ld.w	r0,sp++
800015c6:	78 a0       	ld.w	r0,r12[0x28]
800015c8:	9b 80       	st.w	sp[0x20],r0
800015ca:	78 90       	ld.w	r0,r12[0x24]
800015cc:	9b 70       	st.w	sp[0x1c],r0
800015ce:	33 40       	mov	r0,52
800015d0:	18 00       	add	r0,r12
800015d2:	e5 c0 0f ff 	ldmts	r0,r0-r11
800015d6:	78 80       	ld.w	r0,r12[0x20]
800015d8:	9b 60       	st.w	sp[0x18],r0
800015da:	78 c0       	ld.w	r0,r12[0x30]
800015dc:	9b 90       	st.w	sp[0x24],r0
800015de:	9b ab       	st.w	sp[0x28],r11
800015e0:	9b ba       	st.w	sp[0x2c],r10
800015e2:	9b c9       	st.w	sp[0x30],r9
800015e4:	9b d8       	st.w	sp[0x34],r8
800015e6:	79 10       	ld.w	r0,r12[0x44]
800015e8:	9b 50       	st.w	sp[0x14],r0
800015ea:	78 60       	ld.w	r0,r12[0x18]
800015ec:	d4 01       	pushm	lr
800015ee:	f0 1f 00 08 	mcall	8000160c <contextRestoreFromISR+0x54>
800015f2:	d4 02       	popm	lr
800015f4:	1c 9f       	mov	pc,lr
800015f6:	00 00       	add	r0,r0
800015f8:	80 00       	ld.sh	r0,r0[0x0]
800015fa:	07 34       	ld.ub	r4,r3++
800015fc:	80 00       	ld.sh	r0,r0[0x0]
800015fe:	15 66       	ld.uh	r6,--r10
80001600:	80 00       	ld.sh	r0,r0[0x0]
80001602:	15 6a       	ld.uh	r10,--r10
80001604:	80 00       	ld.sh	r0,r0[0x0]
80001606:	14 00       	add	r0,r10
80001608:	00 00       	add	r0,r0
8000160a:	05 8c       	ld.ub	r12,r2[0x0]
8000160c:	80 00       	ld.sh	r0,r0[0x0]
8000160e:	0a 6a       	and	r10,r5
	...
